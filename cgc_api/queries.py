import pymssql

def executeQuery(query):
    server = "10.7.2.1"
    user = "sqladmin"
    password = "AcChRgHax2C0p3s"
    db = "SIEGE"
    
    with pymssql.connect(server, user, password, db) as conn:
        with conn.cursor(as_dict=True) as cursor:
            cursor.execute(query)
            for row in cursor:
                print(row)


class Queries(object):

    @staticmethod
    def is_op_auth_for_tache(kwargs):
        query = '''
            SELECT 
                T_OPERTEURS_TACHES.CODE_OPERATEUR AS CODE_OPERATEUR,	
                T_OPERTEURS_TACHES.ID_TACHE AS ID_TACHE,	
                T_OPERTEURS_TACHES.ETAT AS ETAT
            FROM 
                T_OPERTEURS_TACHES
            WHERE 
                T_OPERTEURS_TACHES.CODE_OPERATEUR = {pcodeOp}
                AND	T_OPERTEURS_TACHES.ID_TACHE = {pCodeTache}
        '''
        return query.format(**kwargs)
    
    @staticmethod
    def Param_ls_clients_gp(kwargs):
        query = '''
            SELECT 
                T_CLIENTS.CODE_CLIENT AS CODE_CLIENT,	
                T_CLIENTS.NOM_CLIENT AS NOM_CLIENT,	
                T_CLIENTS.ACTIF AS ACTIF,	
                T_CLIENTS.GROUP_CLIENT AS GROUP_CLIENT
            FROM 
                T_CLIENTS
            WHERE 
                T_CLIENTS.ACTIF = 1
                AND	T_CLIENTS.GROUP_CLIENT = {Param_gp}
                AND	T_CLIENTS.CODE_CLIENT NOT IN ({Param_not_in}) 
            ORDER BY 
                NOM_CLIENT ASC
        '''
        return query.format(**kwargs)
    
    @staticmethod
    def Param_supp_objectif_secteurs(kwargs):
        query = '''
            DELETE FROM 
                T_OBJECTIF_SECTEURS
            WHERE 
                T_OBJECTIF_SECTEURS.DATE_OBJECTIF = {Param_date_journee}
                AND	T_OBJECTIF_SECTEURS.code_secteur = {Param_code_secteur}
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_affectation_chargement(kwargs):
        query = '''
SELECT 
	T_CHARGEMENT.CODE_CHARGEMENT AS CODE_CHARGEMENT,	
	T_CHARGEMENT.DATE_CHARGEMENT AS DATE_CHARGEMENT,	
	T_CHARGEMENT.code_secteur AS code_secteur,	
	T_CHARGEMENT.code_vendeur AS code_vendeur,	
	T_CHARGEMENT.code_chauffeur AS code_chauffeur,	
	T_CHARGEMENT.AIDE_VENDEUR1 AS AIDE_VENDEUR1,	
	T_CHARGEMENT.AIDE_VENDEUR2 AS AIDE_VENDEUR2,	
	T_CHARGEMENT.vehicule AS vehicule,	
	T_CHARGEMENT.VALID AS VALID
FROM 
	T_CHARGEMENT
WHERE 
	T_CHARGEMENT.DATE_CHARGEMENT = {Param_date_chargement}
	AND	T_CHARGEMENT.code_secteur = {Param_code_secteur}
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_anc_solde_dep(kwargs):
        query = '''
SELECT 
	SUM(T_MOUVEMENTS_CAISSE.MONTANT) AS la_somme_MONTANT,	
	T_OPERATIONS_CAISSE.DATE_VALIDATION AS DATE_VALIDATION
FROM 
	T_OPERATIONS_CAISSE,	
	T_MOUVEMENTS_CAISSE
WHERE 
	T_OPERATIONS_CAISSE.CODE_OPERATION = T_MOUVEMENTS_CAISSE.ORIGINE
	AND
	(
		T_MOUVEMENTS_CAISSE.CODE_CAISSE = {Param_code_caisse}
		AND	T_OPERATIONS_CAISSE.DATE_OPERATION < {Param_date_journee}
		AND	
		(
			T_OPERATIONS_CAISSE.DATE_VALIDATION = {Param_date_journee}
			OR	T_OPERATIONS_CAISSE.DATE_VALIDATION = '19000101000000'
		)
		AND	T_OPERATIONS_CAISSE.TYPE_OPERATION IN ('D', 'V') 
	)
GROUP BY 
	T_OPERATIONS_CAISSE.DATE_VALIDATION
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_annulation_facture(kwargs):
        query = '''
UPDATE 
	T_FACTURE
SET
	VALID = 0
WHERE 
	T_FACTURE.NUM_FACTURE = {Param_num_facture}
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_annulation_gratuit_prevente(kwargs):
        query = '''
UPDATE T_LIGNE_COMMANDE
SET T_LIGNE_COMMANDE.QTE_PROMO = 0
WHERE ID_COMMANDE IN (SELECT ID_COMMANDE FROM T_COMMANDE_CLIENT WHERE DATE_COMMANDE={param_date} AND code_secteur={param_code_secteur})
AND T_LIGNE_COMMANDE.QTE_LIVREE = 0 AND T_LIGNE_COMMANDE.QTE_COMMANDE>0
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_annule_synchro(kwargs):
        query = '''
UPDATE 
	T_SYNCHRO
SET
	ETAT = 2
WHERE 
	T_SYNCHRO.OPERATION = {Param_operation}
	AND	T_SYNCHRO.SOUS_OPERATION = {Param_sous_operation}
	AND	T_SYNCHRO.ID_OPERATION = {Param_id_operation}
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_article_livraison(kwargs):
        query = '''
SELECT 
	T_MOUVEMENTS.ORIGINE AS ORIGINE,	
	T_MOUVEMENTS.CODE_ARTICLE AS CODE_ARTICLE,	
	T_MOUVEMENTS.QTE_THEORIQUE AS QTE_THEORIQUE,	
	T_MOUVEMENTS.QTE_REEL AS QTE_REEL,	
	T_MOUVEMENTS.QTE_MOUVEMENT AS QTE_MOUVEMENT,	
	T_MOUVEMENTS.QTE_CAISSE AS QTE_CAISSE,	
	T_MOUVEMENTS.QTE_PAL AS QTE_PAL
FROM 
	T_MOUVEMENTS
WHERE 
	T_MOUVEMENTS.ORIGINE = {Param_origine}
	AND	T_MOUVEMENTS.CODE_ARTICLE = {Param_code_article}
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_article_livree_gms_date(kwargs):
        query = '''
SELECT 
	T_LIVRAISON.DATE_LIVRAISON AS DATE_LIVRAISON,	
	T_LIVRAISON.CODE_CLIENT AS CODE_CLIENT,	
	T_PRODUITS_LIVREES.CODE_ARTICLE AS CODE_ARTICLE,	
	SUM(T_PRODUITS_LIVREES.QTE_CHARGEE) AS la_somme_QTE_CHARGEE,	
	T_LIVRAISON.NUM_LIVRAISON AS NUM_LIVRAISON,	
	T_LIVRAISON.TYPE_MVT AS TYPE_MVT
FROM 
	T_LIVRAISON,	
	T_PRODUITS_LIVREES
WHERE 
	T_LIVRAISON.NUM_LIVRAISON = T_PRODUITS_LIVREES.NUM_LIVRAISON
	AND
	(
		T_LIVRAISON.STATUT <> 'A'
		AND	T_LIVRAISON.CODE_CLIENT = {Param_code_client}
		AND	T_LIVRAISON.DATE_LIVRAISON = {Param_date_livraison}
	)
GROUP BY 
	T_LIVRAISON.DATE_LIVRAISON,	
	T_LIVRAISON.CODE_CLIENT,	
	T_PRODUITS_LIVREES.CODE_ARTICLE,	
	T_LIVRAISON.NUM_LIVRAISON,	
	T_LIVRAISON.TYPE_MVT
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_article_magasins(kwargs):
        query = '''
SELECT 
	T_ARTICLES_MAGASINS.CODE_ARTICLE AS CODE_ARTICLE,	
	T_ARTICLES_MAGASINS.MAGASIN AS MAGASIN,	
	T_ARTICLES_MAGASINS.CATEGORIE AS CATEGORIE,	
	T_ARTICLES_MAGASINS.QTE_STOCK AS QTE_STOCK
FROM 
	T_ARTICLES_MAGASINS
WHERE 
	T_ARTICLES_MAGASINS.CATEGORIE = 'PRODUIT'
	AND	T_ARTICLES_MAGASINS.CODE_ARTICLE = {Param_code_article}
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_articles_charges(kwargs):
        query = '''
SELECT 
	T_PRODUITS_CHARGEE.CODE_ARTICLE AS CODE_ARTICLE,	
	T_PRODUITS_CHARGEE.code_secteur AS code_secteur,	
	T_PRODUITS_CHARGEE.QTE_CHARGEE AS QTE_CHARGEE,	
	T_PRODUITS_CHARGEE.QTE_COND AS QTE_COND,	
	T_PRODUITS_CHARGEE.QTE_CHARGEE_VAL AS QTE_CHARGEE_VAL,	
	T_PRODUITS_CHARGEE.MONTANT AS MONTANT,	
	T_PRODUITS_CHARGEE.TOTAL_VENDU AS TOTAL_VENDU,	
	T_PRODUITS_CHARGEE.CODE_CHARGEMENT AS CODE_CHARGEMENT,	
	T_PRODUITS_CHARGEE.QTE_ECART AS QTE_ECART,	
	T_PRODUITS_CHARGEE.DATE_CHARGEMENT AS DATE_CHARGEMENT,	
	T_PRODUITS_CHARGEE.QTE_CHARGEE_SUPP AS QTE_CHARGEE_SUPP,	
	T_PRODUITS_CHARGEE.TOTAL_CHARGEE AS TOTAL_CHARGEE,	
	T_PRODUITS_CHARGEE.code_vendeur AS code_vendeur,	
	T_PRODUITS_CHARGEE.CMD_U AS CMD_U,	
	T_PRODUITS_CHARGEE.CMD_C AS CMD_C,	
	T_PRODUITS_CHARGEE.CREDIT AS CREDIT,	
	T_PRODUITS_CHARGEE.QTE_CHARGEE_POINTE AS QTE_CHARGEE_POINTE
FROM 
	T_PRODUITS_CHARGEE
WHERE 
	T_PRODUITS_CHARGEE.CODE_ARTICLE = {Param_code_article}
	AND	T_PRODUITS_CHARGEE.code_secteur = {Param_code_secteur}
	AND	T_PRODUITS_CHARGEE.DATE_CHARGEMENT = {Param_date_chargement}
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_articles_cmd(kwargs):
        query = '''
SELECT 
	T_PRODUITS_COMMANDES.ID_COMMANDE AS ID_COMMANDE,	
	T_PRODUITS_COMMANDES.CODE_ARTICLE AS CODE_ARTICLE,	
	T_PRODUITS_COMMANDES.QTE_U AS QTE_U,	
	T_PRODUITS_COMMANDES.QTE_C AS QTE_C,	
	T_PRODUITS_COMMANDES.QTE_P AS QTE_P,	
	T_PRIX.PRIX AS PRIX_VENTE,	
	T_PRIX.CODE_AGCE AS CODE_AGCE,	
	T_ARTICLES.TYPE_CAISSE AS TYPE_CAISSE,	
	T_ARTICLES.TYPE_PALETTE AS TYPE_PALETTE
FROM 
	T_ARTICLES,	
	T_PRIX,	
	T_PRODUITS_COMMANDES
WHERE 
	T_ARTICLES.CODE_ARTICLE = T_PRIX.CODE_ARTICLE
	AND		T_ARTICLES.CODE_ARTICLE = T_PRODUITS_COMMANDES.CODE_ARTICLE
	AND
	(
		T_PRODUITS_COMMANDES.ID_COMMANDE = {Param_id_commande}
		AND	T_PRIX.CODE_AGCE = {Param_code_agce}
		AND	T_PRIX.Date_Debut <= {param_dt}
		AND	T_PRIX.Date_Fin >= {param_dt}
	)
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_articles_enseigne(kwargs):
        query = '''
SELECT 
	T_ARTICLES_ENSEIGNE.ID_ENSEIGNE AS ID_ENSEIGNE,	
	T_ARTICLES_ENSEIGNE.CODE_ARTICLE AS CODE_ARTICLE
FROM 
	T_ARTICLES_ENSEIGNE
WHERE 
	T_ARTICLES_ENSEIGNE.ID_ENSEIGNE = {Param_ID_ENSEIGNE}
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_articles_livraison_client(kwargs):
        query = '''
SELECT 
	T_PRODUITS_LIVREES.CODE_ARTICLE AS CODE_ARTICLE,	
	T_PRODUITS_LIVREES.QTE_COMMANDE AS QTE_COMMANDE,	
	T_PRODUITS_LIVREES.QTE_IMPORTE AS QTE_IMPORTE,	
	T_PRODUITS_LIVREES.QTE_CHARGEE AS QTE_CHARGEE,	
	T_PRODUITS_LIVREES.QTE_CAISSE AS QTE_CAISSE,	
	T_PRODUITS_LIVREES.QTE_PAL AS QTE_PAL,	
	T_LIVRAISON.DATE_LIVRAISON AS DATE_LIVRAISON,	
	T_PRODUITS_LIVREES.TYPE_MVT AS TYPE_MVT,	
	T_LIVRAISON.NUM_LIVRAISON AS NUM_LIVRAISON,	
	T_LIVRAISON.CODE_CLIENT AS CODE_CLIENT,	
	T_LIVRAISON.STATUT AS STATUT
FROM 
	T_LIVRAISON,	
	T_PRODUITS_LIVREES
WHERE 
	T_LIVRAISON.NUM_LIVRAISON = T_PRODUITS_LIVREES.NUM_LIVRAISON
	AND
	(
		T_LIVRAISON.DATE_LIVRAISON = {Param_date_livraison}
		AND	T_PRODUITS_LIVREES.TYPE_MVT = {Param_type_mvt}
		AND	T_LIVRAISON.CODE_CLIENT = {Param_code_client}
		AND	T_LIVRAISON.STATUT <> 'A'
	)
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_articles_livraison_secteur(kwargs):
        query = '''
SELECT DISTINCT 
	T_PRODUITS_LIVREES.code_secteur AS code_secteur,	
	T_LIVRAISON.DATE_LIVRAISON AS DATE_LIVRAISON,	
	T_PRODUITS_LIVREES.CODE_ARTICLE AS CODE_ARTICLE
FROM 
	T_LIVRAISON,	
	T_PRODUITS_LIVREES
WHERE 
	T_LIVRAISON.NUM_LIVRAISON = T_PRODUITS_LIVREES.NUM_LIVRAISON
	AND
	(
		T_PRODUITS_LIVREES.STATUT <> 'A'
		AND	T_PRODUITS_LIVREES.code_secteur = {Param_code_secteur}
		AND	T_LIVRAISON.DATE_LIVRAISON = {Param_date_livraison}
	)
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_articles_livrees(kwargs):
        query = '''
SELECT 
	T_MOUVEMENTS.TYPE_MOUVEMENT AS TYPE_MOUVEMENT,	
	T_MOUVEMENTS.ORIGINE AS ORIGINE,	
	T_MOUVEMENTS.CODE_ARTICLE AS CODE_ARTICLE,	
	T_MOUVEMENTS.QTE_THEORIQUE AS QTE_THEORIQUE,	
	T_MOUVEMENTS.QTE_REEL AS QTE_REEL,	
	T_MOUVEMENTS.QTE_ECART AS QTE_ECART,	
	T_MOUVEMENTS.QTE_MOUVEMENT AS QTE_MOUVEMENT,	
	T_MOUVEMENTS.PRIX AS PRIX,	
	T_MOUVEMENTS.MONTANT AS MONTANT,	
	T_MOUVEMENTS.MONTANT_ECART AS MONTANT_ECART,	
	T_MOUVEMENTS.QTE_CAISSE AS QTE_CAISSE,	
	T_MOUVEMENTS.QTE_PAL AS QTE_PAL
FROM 
	T_MOUVEMENTS
WHERE 
	T_MOUVEMENTS.ORIGINE = {Param_origine}
	AND	T_MOUVEMENTS.TYPE_MOUVEMENT = 'L'
        '''
        return query.format(**kwargs)

    @staticmethod
    def req_autorisation_caisserie(kwargs):
        query = '''
SELECT 
	T_AUTORISATION_SOLDE_CAISSERIE.ID_JUSTIFICATION AS ID_JUSTIFICATION,	
	T_AUTORISATION_SOLDE_CAISSERIE.DATE_HEURE AS DATE_HEURE
FROM 
	T_AUTORISATION_SOLDE_CAISSERIE
WHERE 
	T_AUTORISATION_SOLDE_CAISSERIE.DATE_HEURE = {Param_dt}
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_bl_non_envoyer(kwargs):
        query = '''
SELECT 
	T_LIVRAISON.NUM_LIVRAISON AS NUM_LIVRAISON,	
	T_LIVRAISON.DATE_VALIDATION AS DATE_VALIDATION,	
	T_LIVRAISON.TYPE_MVT AS TYPE_MVT,	
	T_LIVRAISON.MOTIF_ENVOI AS MOTIF_ENVOI,	
	T_LIVRAISON.STATUT AS STATUT,	
	T_CLIENTS.NOM_CLIENT AS NOM_CLIENT,	
	T_LIVRAISON.BENEFICIAIRE AS BENEFICIAIRE,	
	SUM(T_PRODUITS_LIVREES.QTE_CHARGEE) AS la_somme_QTE_CHARGEE
FROM 
	T_LIVRAISON,	
	T_PRODUITS_LIVREES,	
	T_CLIENTS
WHERE 
	T_CLIENTS.CODE_CLIENT = T_LIVRAISON.CODE_CLIENT
	AND		T_LIVRAISON.NUM_LIVRAISON = T_PRODUITS_LIVREES.NUM_LIVRAISON
	AND
	(
		T_LIVRAISON.TYPE_MVT IN ('L', 'R', 'D') 
		AND	T_LIVRAISON.STATUT <> 'A'
		AND	T_LIVRAISON.MOTIF_ENVOI <> 1
		AND	T_LIVRAISON.DATE_VALIDATION <> '19000101000000000'
	)
GROUP BY 
	T_LIVRAISON.NUM_LIVRAISON,	
	T_LIVRAISON.DATE_VALIDATION,	
	T_LIVRAISON.TYPE_MVT,	
	T_LIVRAISON.MOTIF_ENVOI,	
	T_LIVRAISON.STATUT,	
	T_CLIENTS.NOM_CLIENT,	
	T_LIVRAISON.BENEFICIAIRE
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_bl_non_envoyer_cond(kwargs):
        query = '''
SELECT 
	T_LIVRAISON.NUM_LIVRAISON AS NUM_LIVRAISON,	
	T_LIVRAISON.DATE_VALIDATION AS DATE_VALIDATION,	
	T_LIVRAISON.TYPE_MVT AS TYPE_MVT,	
	T_LIVRAISON.MOTIF_ENVOI AS MOTIF_ENVOI,	
	T_LIVRAISON.STATUT AS STATUT,	
	T_CLIENTS.NOM_CLIENT AS NOM_CLIENT,	
	T_LIVRAISON.BENEFICIAIRE AS BENEFICIAIRE,	
	SUM(T_COND_LIVRAISON.QTE_CHARGEE) AS la_somme_QTE_CHARGEE
FROM 
	T_LIVRAISON,	
	T_COND_LIVRAISON,	
	T_CLIENTS
WHERE 
	T_CLIENTS.CODE_CLIENT = T_LIVRAISON.CODE_CLIENT
	AND		T_LIVRAISON.NUM_LIVRAISON = T_COND_LIVRAISON.NUM_LIVRAISON
	AND
	(
		T_LIVRAISON.TYPE_MVT IN ('L', 'R', 'D') 
		AND	T_LIVRAISON.STATUT <> 'A'
		AND	T_LIVRAISON.MOTIF_ENVOI <> 1
		AND	T_LIVRAISON.DATE_VALIDATION <> '19000101000000000'
	)
GROUP BY 
	T_LIVRAISON.NUM_LIVRAISON,	
	T_LIVRAISON.DATE_VALIDATION,	
	T_LIVRAISON.TYPE_MVT,	
	T_LIVRAISON.MOTIF_ENVOI,	
	T_LIVRAISON.STATUT,	
	T_CLIENTS.NOM_CLIENT,	
	T_LIVRAISON.BENEFICIAIRE
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_bls_synch(kwargs):
        query = '''
SELECT 
	T_SYNCHRO.ID_OPERATION AS ID_OPERATION
FROM 
	T_SYNCHRO
WHERE 
	T_SYNCHRO.OPERATION = 'BL '
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_bordereau(kwargs):
        query = '''
SELECT 
	T_DECOMPTE.DATE_DECOMPTE AS DATE_DECOMPTE,	
	T_DT_DECOMPTE.DATE_CHEQUE AS DATE_CHEQUE,	
	T_DECOMPTE.MODE_PAIEMENT AS MODE_PAIEMENT,	
	T_DECOMPTE.MONTANT AS MONTANT,	
	T_DECOMPTE.REFERENCE AS REFERENCE,	
	T_DT_DECOMPTE.LE_TIRE AS LE_TIRE,	
	T_DT_DECOMPTE.DATE_ECHEANCE AS DATE_ECHEANCE,	
	T_DT_DECOMPTE.TYPE AS TYPE,	
	T_BANQUES.LIBELLE AS LIBELLE
FROM 
	T_DECOMPTE,	
	T_DT_DECOMPTE,	
	T_BANQUES
WHERE 
	T_DECOMPTE.NUM_DECOMPTE = T_DT_DECOMPTE.NUM_DECOMPTE
	AND		T_BANQUES.NUM_BANQUE = T_DECOMPTE.CODE_BANQUE
	AND
	(
		T_DT_DECOMPTE.TYPE <= 2
		AND	T_DECOMPTE.DATE_DECOMPTE BETWEEN {Param_dt1} AND {Param_dt2}
		AND	T_DECOMPTE.MODE_PAIEMENT = {Param_type}
	)
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_budget_mensuel(kwargs):
        query = '''
SELECT 
	T_ARTICLES.CODE_PRODUIT AS CODE_PRODUIT,	
	T_BUDGET_MENSUEL.DATE_BUDGET AS DATE_BUDGET,	
	T_BUDGET_MENSUEL.CODE_ARTICLE AS CODE_ARTICLE,	
	T_BUDGET_MENSUEL.QTE AS QTE
FROM 
	T_ARTICLES,	
	T_BUDGET_MENSUEL
WHERE 
	T_ARTICLES.CODE_ARTICLE = T_BUDGET_MENSUEL.CODE_ARTICLE
	AND
	(
		T_BUDGET_MENSUEL.DATE_BUDGET = {Param_date_budget}
	)
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_ca_client_objectif(kwargs):
        query = '''
SELECT 
	T_OBJECTIFS.CODE_CLIENT AS CODE_CLIENT,	
	T_OBJECTIFS.OBJECTIF AS OBJECTIF,	
	T_OBJECTIFS.REMISE_OBJECTIF AS REMISE_OBJECTIF,	
	SUM(T_FACTURE.MONTANT_FACTURE) AS la_somme_MONTANT_FACTURE,	
	T_FACTURE.DATE_HEURE AS DATE_HEURE
FROM 
	T_FACTURE
	LEFT OUTER JOIN
	T_OBJECTIFS
	ON T_FACTURE.CODE_CLIENT = T_OBJECTIFS.CODE_CLIENT
WHERE 
	(
	T_FACTURE.DATE_HEURE BETWEEN {Param_dt1} AND {Param_dt2}
	AND	T_OBJECTIFS.CODE_CLIENT = {Param_code_client}
)
GROUP BY 
	T_OBJECTIFS.CODE_CLIENT,	
	T_OBJECTIFS.OBJECTIF,	
	T_OBJECTIFS.REMISE_OBJECTIF,	
	T_FACTURE.DATE_HEURE
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_ca_invendu(kwargs):
        query = '''
SELECT 
	T_PRODUITS_CHARGEE.DATE_CHARGEMENT AS DATE_CHARGEMENT,	
	T_PRODUITS_CHARGEE.code_secteur AS code_secteur,	
	SUM(( T_PRODUITS_CHARGEE.TOTAL_INVENDU_POINTE * T_PRODUITS_CHARGEE.PRIX ) ) AS CA_INVENDU,
	SUM(( T_PRODUITS_CHARGEE.QTE_CHARGEE_POINTE * T_PRODUITS_CHARGEE.PRIX ) ) AS CA_ENLEV
FROM 
	T_GAMME,	
	T_FAMILLE,	
	T_PRODUITS,	
	T_ARTICLES,	
	T_PRODUITS_CHARGEE
WHERE 
		T_FAMILLE.CODE_GAMME	=	T_GAMME.CODE_GAMME
	AND	T_PRODUITS.CODE_FAMILLE	=	T_FAMILLE.CODE_FAMILLE
	AND	T_ARTICLES.CODE_PRODUIT	=	T_PRODUITS.CODE_PRODUIT
	AND	T_PRODUITS_CHARGEE.CODE_ARTICLE	=	T_ARTICLES.CODE_ARTICLE
	AND
	(
		T_PRODUITS_CHARGEE.DATE_CHARGEMENT = {Param_date_chargement}
		AND	T_PRODUITS_CHARGEE.code_secteur = {Param_code_secteur}
		AND	T_GAMME.CODE_GAMME <> 1
	)
GROUP BY 
	T_PRODUITS_CHARGEE.DATE_CHARGEMENT,	
	T_PRODUITS_CHARGEE.code_secteur
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_ca_invendu_periode(kwargs):
        query = '''
SELECT 
	T_PRODUITS_CHARGEE.code_secteur AS code_secteur,	
	SUM(( T_PRODUITS_CHARGEE.TOTAL_INVENDU_POINTE * T_PRODUITS_CHARGEE.PRIX ) ) AS CA_INVENDU,	
	SUM(( T_PRODUITS_CHARGEE.QTE_CHARGEE_POINTE * T_PRODUITS_CHARGEE.PRIX ) ) AS CA_ENLEV
FROM 
	T_GAMME,	
	T_FAMILLE,	
	T_PRODUITS,	
	T_ARTICLES,	
	T_PRODUITS_CHARGEE
WHERE 
	T_PRODUITS_CHARGEE.CODE_ARTICLE = T_ARTICLES.CODE_ARTICLE
	AND		T_ARTICLES.CODE_PRODUIT = T_PRODUITS.CODE_PRODUIT
	AND		T_PRODUITS.CODE_FAMILLE = T_FAMILLE.CODE_FAMILLE
	AND		T_FAMILLE.CODE_GAMME = T_GAMME.CODE_GAMME
	AND
	(
		T_PRODUITS_CHARGEE.DATE_CHARGEMENT BETWEEN {Param_date1} AND {Param_date2}
		AND	T_PRODUITS_CHARGEE.code_secteur = {Param_code_secteur}
		AND	T_GAMME.CODE_GAMME <> 1
	)
GROUP BY 
	T_PRODUITS_CHARGEE.code_secteur
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_ca_lait_frais(kwargs):
        query = '''
SELECT 
	T_FACTURE.CODE_CLIENT AS CODE_CLIENT,	
	SUM(( ( ( T_DT_FACTURE.QTE_VENTE - T_DT_FACTURE.QTE_PERTE ) - T_DT_FACTURE.QTE_PROMO ) * T_DT_FACTURE.PRIX ) ) AS CA,	
	T_ARTICLES.TVA AS TVA
FROM 
	T_DT_FACTURE,	
	T_FACTURE,	
	T_ARTICLES
WHERE 
	T_FACTURE.NUM_FACTURE = T_DT_FACTURE.NUM_FACTURE
	AND		T_ARTICLES.CODE_ARTICLE = T_DT_FACTURE.CODE_ARTICLE
	AND
	(
		T_FACTURE.CODE_CLIENT = {Param_code_client}
		AND	T_FACTURE.DATE_HEURE >= {Param_dt1}
		AND	T_FACTURE.DATE_HEURE <= {Param_dt2}
		AND	T_FACTURE.VALID = 1
		AND	T_DT_FACTURE.CODE_ARTICLE IN (1, 2) 
	)
GROUP BY 
	T_FACTURE.CODE_CLIENT,	
	T_ARTICLES.TVA
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_ca_pda(kwargs):
        query = '''
SELECT 
	SUM(T_FACTURE.MONTANT_FACTURE) AS la_somme_MONTANT_FACTURE,	
	SUM(T_FACTURE.MONTANT_PERTE) AS la_somme_MONTANT_PERTE
FROM 
	T_CLIENTS,	
	T_FACTURE,	
	T_SOUS_SECTEUR
WHERE 
	T_SOUS_SECTEUR.CODE_SOUS_SECTEUR = T_CLIENTS.SOUS_SECTEUR
	AND		T_CLIENTS.CODE_CLIENT = T_FACTURE.CODE_CLIENT
	AND
	(
		T_FACTURE.VALID = 1
		AND	T_SOUS_SECTEUR.code_secteur = {Param_code_secteur}
		AND	T_FACTURE.DATE_HEURE BETWEEN {Param_dt1} AND {Param_dt2}
	)
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_ca_secteur(kwargs):
        query = '''
SELECT 
	T_PRODUITS_CHARGEE.code_secteur AS code_secteur,	
	SUM(T_PRODUITS_CHARGEE.MONTANT) AS MONTANT_VENTE,	
	SUM(T_PRODUITS_CHARGEE.MONTANT_CREDIT) AS MONTANT_CREDIT
FROM 
	T_PRODUITS_CHARGEE
WHERE 
	T_PRODUITS_CHARGEE.DATE_CHARGEMENT BETWEEN {Param_dt1} AND {Param_dt2}
	AND	T_PRODUITS_CHARGEE.code_secteur = {Param_code_secteur}
GROUP BY 
	T_PRODUITS_CHARGEE.code_secteur
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_ca_secteur_date(kwargs):
        query = '''
SELECT 
	T_PRODUITS_CHARGEE.DATE_CHARGEMENT AS DATE_CHARGEMENT,	
	T_PRODUITS_CHARGEE.code_secteur AS code_secteur,	
	SUM(T_PRODUITS_CHARGEE.MONTANT) AS MONTANT_VENTE,	
	SUM(T_PRODUITS_CHARGEE.MONTANT_CREDIT) AS MONTANT_CREDIT,	
	SUM(( T_PRODUITS_CHARGEE.TOTAL_RENDUS_COM * T_PRODUITS_CHARGEE.PRIX ) ) AS CA_PERTE,	
	SUM(( T_PRODUITS_CHARGEE.TOTAL_REMISE * T_PRODUITS_CHARGEE.PRIX ) ) AS CA_REMISE,	
	T_OPERATEUR.NOM_OPERATEUR AS NOM_OPERATEUR,	
	T_CHARGEMENT.HEURE_SORTIE AS HEURE_SORTIE,	
	T_CHARGEMENT.HEURE_ENTREE AS HEURE_ENTREE,	
	T_CHARGEMENT.KM_PARCOURUS AS KM_PARCOURUS
FROM 
	T_OPERATEUR,	
	T_CHARGEMENT,	
	T_PRODUITS_CHARGEE
WHERE 
	T_OPERATEUR.CODE_OPERATEUR = T_CHARGEMENT.code_vendeur
	AND		T_CHARGEMENT.CODE_CHARGEMENT = T_PRODUITS_CHARGEE.CODE_CHARGEMENT
	AND
	(
		T_PRODUITS_CHARGEE.DATE_CHARGEMENT BETWEEN {Param_dt1} AND {Param_dt2}
		AND	T_PRODUITS_CHARGEE.code_secteur = {Param_code_secteur}
	)
GROUP BY 
	T_PRODUITS_CHARGEE.code_secteur,	
	T_PRODUITS_CHARGEE.DATE_CHARGEMENT,	
	T_OPERATEUR.NOM_OPERATEUR,	
	T_CHARGEMENT.HEURE_SORTIE,	
	T_CHARGEMENT.HEURE_ENTREE,	
	T_CHARGEMENT.KM_PARCOURUS
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_ca_secteur_periode(kwargs):
        query = '''
SELECT 
	T_PRODUITS_CHARGEE.code_secteur AS code_secteur,	
	SUM(T_PRODUITS_CHARGEE.MONTANT) AS la_somme_MONTANT,	
	SUM(T_PRODUITS_CHARGEE.MONTANT_CREDIT) AS la_somme_MONTANT_CREDIT,
	SUM(T_PRODUITS_CHARGEE.TOTAL_RENDUS_POINTE * T_PRODUITS_CHARGEE.PRIX) AS CA_PERTE
FROM 
	T_PRODUITS_CHARGEE
WHERE 
	T_PRODUITS_CHARGEE.DATE_CHARGEMENT BETWEEN {Param_dt1} AND {Param_dt2}
GROUP BY 
	T_PRODUITS_CHARGEE.code_secteur
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_caisses_palettes(kwargs):
        query = '''
SELECT 
	T_CAISSES_PALETTES.CODE_TYPE AS CODE_TYPE,	
	T_CAISSES_PALETTES.NOM_TYPE AS NOM_TYPE,	
	T_CAISSES_PALETTES.ABREVIATION AS ABREVIATION,	
	T_CAISSES_PALETTES.CATEGORIE AS CATEGORIE,	
	T_CAISSES_PALETTES.PRIX_VENTE AS PRIX_VENTE,	
	T_CAISSES_PALETTES.PRME_RECUP AS PRME_RECUP,	
	T_CAISSES_PALETTES.RANG AS RANG
FROM 
	T_CAISSES_PALETTES
ORDER BY 
	RANG ASC
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_chargement(kwargs):
        query = '''
SELECT 
	T_ARTICLES.CODE_ARTICLE AS CODE_ARTICLE,	
	T_PRODUITS_CHARGEE.CODE_CHARGEMENT AS CODE_CHARGEMENT,	
	T_PRODUITS_CHARGEE.DATE_CHARGEMENT AS DATE_CHARGEMENT,	
	T_ARTICLES.RANG AS RANG,	
	T_ARTICLES.ABREVIATION AS ABREVIATION,	
	T_ARTICLES.LIBELLE_COURT AS LIBELLE_COURT,	
	T_ARTICLES.CONDITIONNEMENT AS CONDITIONNEMENT,	
	T_ARTICLES.QTE_PALETTE AS QTE_PALETTE,	
	T_ARTICLES.ACTIF AS ACTIF,	
	T_PRODUITS_CHARGEE.QTE_CHARGEE AS QTE_CHARGEE,	
	T_PRODUITS_CHARGEE.QTE_COND AS QTE_COND,	
	T_PRODUITS_CHARGEE.QTE_CHARGEE_SUPP AS QTE_CHARGEE_SUPP,	
	T_PRODUITS_CHARGEE.QTE_ECART AS QTE_ECART,	
	T_PRODUITS_CHARGEE.TOTAL_VENDU AS TOTAL_VENDU,	
	T_PRODUITS_CHARGEE.MONTANT AS MONTANT,	
	T_PRODUITS_CHARGEE.MONTANT_CREDIT AS MONTANT_CREDIT,	
	T_PRODUITS_CHARGEE.TOTAL_GRATUIT AS TOTAL_GRATUIT,	
	T_PRODUITS_CHARGEE.TOTAL_DONS AS TOTAL_DONS,	
	T_PRODUITS_CHARGEE.TOTAL_ECHANGE AS TOTAL_ECHANGE,	
	T_PRODUITS_CHARGEE.TOTAL_REMISE AS TOTAL_REMISE,	
	T_PRODUITS_CHARGEE.TOTAL_RENDUS_AG AS TOTAL_RENDUS_AG,	
	T_PRODUITS_CHARGEE.TOTAL_RENDUS_US AS TOTAL_RENDUS_US,	
	T_PRODUITS_CHARGEE.TOTAL_RENDUS_COM AS TOTAL_RENDUS_COM,	
	T_PRODUITS_CHARGEE.TOTAL_RENDUS_SP AS TOTAL_RENDUS_SP,	
	T_PRODUITS_CHARGEE.TOTAL_INVENDU_POINTE AS TOTAL_INVENDU_POINTE,	
	T_PRODUITS_CHARGEE.PRIX AS PRIX,	
	T_PRODUITS_CHARGEE.PRIX_VNT AS PRIX_VNT,	
	T_CHARGEMENT.code_secteur AS code_secteur,	
	T_CHARGEMENT.CODE_TOURNEE AS CODE_TOURNEE,	
	T_CHARGEMENT.code_vendeur AS code_vendeur,	
	T_CHARGEMENT.VALID AS VALID,	
	T_CHARGEMENT.MONTANT_A_VERSER AS MONTANT_A_VERSER,	
	T_PRODUITS_CHARGEE.QTE_CHARGEE_POINTE AS QTE_CHARGEE_POINTE,	
	T_PRODUITS_CHARGEE.CREDIT AS CREDIT
FROM 
	T_CHARGEMENT,	
	T_PRODUITS_CHARGEE,	
	T_ARTICLES
WHERE 
	T_CHARGEMENT.CODE_CHARGEMENT = T_PRODUITS_CHARGEE.CODE_CHARGEMENT
	AND		T_ARTICLES.CODE_ARTICLE = T_PRODUITS_CHARGEE.CODE_ARTICLE
	AND
	(
		T_ARTICLES.ACTIF = 1
		AND	T_PRODUITS_CHARGEE.CODE_CHARGEMENT = {Param_code_chargement}
	)
ORDER BY 
	RANG ASC
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_chargement_article(kwargs):
        query = '''
SELECT 
	T_CHARGEMENT.code_vendeur AS code_vendeur,	
	SUM(T_PRODUITS_CHARGEE.TOTAL_CHARGEE) AS la_somme_TOTAL_CHARGEE,	
	SUM(T_PRODUITS_CHARGEE.TOTAL_VENDU) AS la_somme_TOTAL_VENDU,	
	SUM(T_PRODUITS_CHARGEE.TOTAL_GRATUIT) AS la_somme_TOTAL_GRATUIT,	
	SUM(T_PRODUITS_CHARGEE.TOTAL_DONS) AS la_somme_TOTAL_DONS,	
	SUM(T_PRODUITS_CHARGEE.TOTAL_REMISE) AS la_somme_TOTAL_REMISE,	
	SUM(T_PRODUITS_CHARGEE.TOTAL_RENDUS_POINTE) AS la_somme_TOTAL_RENDUS_POINTE,	
	SUM(T_PRODUITS_CHARGEE.TOTAL_INVENDU_POINTE) AS la_somme_TOTAL_INVENDU_POINTE,	
	SUM(T_PRODUITS_CHARGEE.CMD_U) AS la_somme_CMD_U,	
	SUM(T_PRODUITS_CHARGEE.TOTAL_RENDUS_COM) AS la_somme_TOTAL_RENDUS_COM,	
	T_CHARGEMENT.CHARGEMENT_CAC AS CHARGEMENT_CAC,	
	T_OPERATEUR.FONCTION AS FONCTION,	
	T_PRODUITS_CHARGEE.CODE_ARTICLE AS CODE_ARTICLE,	
	SUM(T_PRODUITS_CHARGEE.CREDIT) AS la_somme_CREDIT,	
	T_CHARGEMENT.code_secteur AS CODE_SECTEUR_T_,	
	T_CHARGEMENT.DATE_CHARGEMENT AS DATE_CHARGEMENT,	
	T_CHARGEMENT.AIDE_VENDEUR1 AS AIDE_VENDEUR1,	
	T_CHARGEMENT.AIDE_VENDEUR2 AS AIDE_VENDEUR2,	
	T_CHARGEMENT.code_chauffeur AS code_chauffeur,	
	T_CHARGEMENT.vehicule AS vehicule,	
	SUM(T_PRODUITS_CHARGEE.TOTAL_RENDUS_US) AS la_somme_TOTAL_RENDUS_US,	
	T_CHARGEMENT.CODE_CHARGEMENT AS CODE_CHARGEMENT
FROM 
	T_CHARGEMENT,	
	T_PRODUITS_CHARGEE,	
	T_OPERATEUR
WHERE 
	T_CHARGEMENT.CODE_CHARGEMENT = T_PRODUITS_CHARGEE.CODE_CHARGEMENT
	AND		T_OPERATEUR.CODE_OPERATEUR = T_CHARGEMENT.code_vendeur
	AND
	(
		T_CHARGEMENT.code_secteur = {Param_code_secteur}
		AND	T_CHARGEMENT.DATE_CHARGEMENT = {Param_date_chargement}
	)
GROUP BY 
	T_CHARGEMENT.code_vendeur,	
	T_CHARGEMENT.CHARGEMENT_CAC,	
	T_OPERATEUR.FONCTION,	
	T_PRODUITS_CHARGEE.CODE_ARTICLE,	
	T_CHARGEMENT.code_secteur,	
	T_CHARGEMENT.DATE_CHARGEMENT,	
	T_CHARGEMENT.AIDE_VENDEUR1,	
	T_CHARGEMENT.AIDE_VENDEUR2,	
	T_CHARGEMENT.code_chauffeur,	
	T_CHARGEMENT.vehicule,	
	T_CHARGEMENT.CODE_CHARGEMENT
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_chargement_cond(kwargs):
        query = '''
SELECT 
	T_COND_CHARGEE.CODE_CHARGEMENT AS CODE_CHARGEMENT,	
	T_COND_CHARGEE.CODE_COND AS CODE_COND,	
	T_COND_CHARGEE.QTE_CHARGEE AS QTE_CHARGEE,	
	T_COND_CHARGEE.QTE_CHARGEE_VAL AS QTE_CHARGEE_VAL,	
	T_COND_CHARGEE.QTE_RETOUR AS QTE_RETOUR,	
	T_COND_CHARGEE.CREDIT AS CREDIT,	
	T_CAISSES_PALETTES.NOM_TYPE AS NOM_TYPE,	
	T_CAISSES_PALETTES.ABREVIATION AS ABREVIATION,	
	T_COND_CHARGEE.QTE_CHAR_SUPP AS QTE_CHAR_SUPP,	
	T_COND_CHARGEE.QTE_POINTE AS QTE_POINTE,	
	T_COND_CHARGEE.ECART AS ECART
FROM 
	T_CAISSES_PALETTES,	
	T_COND_CHARGEE
WHERE 
	T_CAISSES_PALETTES.CODE_TYPE = T_COND_CHARGEE.CODE_COND
	AND
	(
		T_COND_CHARGEE.CODE_CHARGEMENT = {Param_code_chargement}
	)
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_chargement_non_valide(kwargs):
        query = '''
SELECT 
	T_CHARGEMENT.DATE_CHARGEMENT AS DATE_CHARGEMENT,	
	COUNT(T_CHARGEMENT.CODE_CHARGEMENT) AS Comptage_1,	
	T_CHARGEMENT.VALID AS VALID,	
	T_SECTEUR.NOM_SECTEUR AS NOM_SECTEUR
FROM 
	T_SECTEUR,	
	T_CHARGEMENT
WHERE 
	T_SECTEUR.code_secteur = T_CHARGEMENT.code_secteur
	AND
	(
		T_CHARGEMENT.DATE_CHARGEMENT = {Param_date_chargement}
		AND	T_CHARGEMENT.VALID = 0
	)
GROUP BY 
	T_CHARGEMENT.DATE_CHARGEMENT,	
	T_CHARGEMENT.VALID,	
	T_SECTEUR.NOM_SECTEUR
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_chargement_par_article(kwargs):
        query = '''
SELECT 
	T_ARTICLES.CODE_ARTICLE AS CODE_ARTICLE,	
	T_PRODUITS_CHARGEE.CODE_CHARGEMENT AS CODE_CHARGEMENT,	
	T_PRODUITS_CHARGEE.DATE_CHARGEMENT AS DATE_CHARGEMENT,	
	T_ARTICLES.RANG AS RANG,	
	T_ARTICLES.ABREVIATION AS ABREVIATION,	
	T_ARTICLES.LIBELLE_COURT AS LIBELLE_COURT,	
	T_ARTICLES.CONDITIONNEMENT AS CONDITIONNEMENT,	
	T_ARTICLES.QTE_PALETTE AS QTE_PALETTE,	
	T_ARTICLES.ACTIF AS ACTIF,	
	T_PRODUITS_CHARGEE.QTE_CHARGEE AS QTE_CHARGEE,	
	T_PRODUITS_CHARGEE.QTE_COND AS QTE_COND,	
	T_PRODUITS_CHARGEE.QTE_CHARGEE_SUPP AS QTE_CHARGEE_SUPP,	
	T_PRODUITS_CHARGEE.QTE_ECART AS QTE_ECART,	
	T_PRODUITS_CHARGEE.TOTAL_VENDU AS TOTAL_VENDU,	
	T_PRODUITS_CHARGEE.MONTANT AS MONTANT,	
	T_PRODUITS_CHARGEE.MONTANT_CREDIT AS MONTANT_CREDIT,	
	T_PRODUITS_CHARGEE.TOTAL_GRATUIT AS TOTAL_GRATUIT,	
	T_PRODUITS_CHARGEE.TOTAL_DONS AS TOTAL_DONS,	
	T_PRODUITS_CHARGEE.TOTAL_ECHANGE AS TOTAL_ECHANGE,	
	T_PRODUITS_CHARGEE.TOTAL_REMISE AS TOTAL_REMISE,	
	T_PRODUITS_CHARGEE.TOTAL_RENDUS_AG AS TOTAL_RENDUS_AG,	
	T_PRODUITS_CHARGEE.TOTAL_RENDUS_US AS TOTAL_RENDUS_US,	
	T_PRODUITS_CHARGEE.TOTAL_RENDUS_COM AS TOTAL_RENDUS_COM,	
	T_PRODUITS_CHARGEE.TOTAL_RENDUS_SP AS TOTAL_RENDUS_SP,	
	T_PRODUITS_CHARGEE.TOTAL_INVENDU_POINTE AS TOTAL_INVENDU_POINTE,	
	T_PRODUITS_CHARGEE.PRIX AS PRIX,	
	T_CHARGEMENT.code_secteur AS code_secteur,	
	T_CHARGEMENT.CODE_TOURNEE AS CODE_TOURNEE,	
	T_CHARGEMENT.code_vendeur AS code_vendeur,	
	T_CHARGEMENT.VALID AS VALID,	
	T_CHARGEMENT.MONTANT_A_VERSER AS MONTANT_A_VERSER,	
	T_PRODUITS_CHARGEE.QTE_CHARGEE_POINTE AS QTE_CHARGEE_POINTE,	
	T_PRODUITS_CHARGEE.CREDIT AS CREDIT,	
	T_SECTEUR.NOM_SECTEUR AS NOM_SECTEUR
FROM 
	T_ARTICLES,	
	T_PRODUITS_CHARGEE,	
	T_CHARGEMENT,	
	T_SECTEUR
WHERE 
	T_SECTEUR.code_secteur = T_CHARGEMENT.code_secteur
	AND		T_CHARGEMENT.CODE_CHARGEMENT = T_PRODUITS_CHARGEE.CODE_CHARGEMENT
	AND		T_ARTICLES.CODE_ARTICLE = T_PRODUITS_CHARGEE.CODE_ARTICLE
	AND
	(
		T_ARTICLES.ACTIF = 1
		AND	T_PRODUITS_CHARGEE.DATE_CHARGEMENT = {Param_date_chragement}
		AND	T_CHARGEMENT.code_secteur = {Param_code_secteur}
		AND	T_ARTICLES.CODE_ARTICLE = {Param_code_article}
	)
ORDER BY 
	RANG ASC
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_chargement_par_produit(kwargs):
        query = '''
SELECT 
	T_PRODUITS_CHARGEE.CODE_CHARGEMENT AS CODE_CHARGEMENT,	
	T_PRODUITS_CHARGEE.DATE_CHARGEMENT AS DATE_CHARGEMENT,	
	MAX(T_ARTICLES.RANG) AS le_maximum_RANG,	
	T_CHARGEMENT.code_secteur AS code_secteur,	
	T_CHARGEMENT.CODE_TOURNEE AS CODE_TOURNEE,	
	T_CHARGEMENT.code_vendeur AS code_vendeur,	
	T_CHARGEMENT.VALID AS VALID,	
	T_CHARGEMENT.MONTANT_A_VERSER AS MONTANT_A_VERSER,	
	T_SECTEUR.NOM_SECTEUR AS NOM_SECTEUR,	
	T_PRODUITS.CODE_PRODUIT AS CODE_PRODUIT,	
	T_PRODUITS.NOM_PRODUIT AS NOM_PRODUIT,	
	SUM(T_PRODUITS_CHARGEE.QTE_CHARGEE) AS la_somme_QTE_CHARGEE,	
	SUM(T_PRODUITS_CHARGEE.QTE_COND) AS la_somme_QTE_COND,	
	SUM(T_PRODUITS_CHARGEE.QTE_CHARGEE_SUPP) AS la_somme_QTE_CHARGEE_SUPP,	
	SUM(T_PRODUITS_CHARGEE.QTE_ECART) AS la_somme_QTE_ECART,	
	SUM(T_PRODUITS_CHARGEE.TOTAL_VENDU) AS la_somme_TOTAL_VENDU,	
	SUM(T_PRODUITS_CHARGEE.MONTANT) AS la_somme_MONTANT,	
	SUM(T_PRODUITS_CHARGEE.MONTANT_CREDIT) AS la_somme_MONTANT_CREDIT,	
	SUM(T_PRODUITS_CHARGEE.TOTAL_GRATUIT) AS la_somme_TOTAL_GRATUIT,	
	SUM(T_PRODUITS_CHARGEE.TOTAL_DONS) AS la_somme_TOTAL_DONS,	
	SUM(T_PRODUITS_CHARGEE.TOTAL_ECHANGE) AS la_somme_TOTAL_ECHANGE,	
	SUM(T_PRODUITS_CHARGEE.TOTAL_REMISE) AS la_somme_TOTAL_REMISE,	
	SUM(T_PRODUITS_CHARGEE.TOTAL_RENDUS_AG) AS la_somme_TOTAL_RENDUS_AG,	
	SUM(T_PRODUITS_CHARGEE.TOTAL_RENDUS_US) AS la_somme_TOTAL_RENDUS_US,	
	SUM(T_PRODUITS_CHARGEE.TOTAL_RENDUS_COM) AS la_somme_TOTAL_RENDUS_COM,	
	SUM(T_PRODUITS_CHARGEE.TOTAL_RENDUS_SP) AS la_somme_TOTAL_RENDUS_SP,	
	SUM(T_PRODUITS_CHARGEE.TOTAL_INVENDU_POINTE) AS la_somme_TOTAL_INVENDU_POINTE,	
	MAX(T_PRODUITS_CHARGEE.PRIX) AS le_maximum_PRIX,	
	SUM(T_PRODUITS_CHARGEE.QTE_CHARGEE_POINTE) AS la_somme_QTE_CHARGEE_POINTE,	
	SUM(T_PRODUITS_CHARGEE.CREDIT) AS la_somme_CREDIT
FROM 
	T_CHARGEMENT,	
	T_PRODUITS_CHARGEE,	
	T_SECTEUR,	
	T_ARTICLES,	
	T_PRODUITS
WHERE 
	T_PRODUITS.CODE_PRODUIT = T_ARTICLES.CODE_PRODUIT
	AND		T_ARTICLES.CODE_ARTICLE = T_PRODUITS_CHARGEE.CODE_ARTICLE
	AND		T_SECTEUR.code_secteur = T_PRODUITS_CHARGEE.code_secteur
	AND		T_CHARGEMENT.CODE_CHARGEMENT = T_PRODUITS_CHARGEE.CODE_CHARGEMENT
	AND
	(
		T_PRODUITS_CHARGEE.DATE_CHARGEMENT = {Param_date_chragement}
		AND	T_CHARGEMENT.code_secteur = {Param_code_secteur}
		AND	T_PRODUITS.CODE_PRODUIT = {Param_code_produit}
	)
GROUP BY 
	T_PRODUITS_CHARGEE.CODE_CHARGEMENT,	
	T_PRODUITS_CHARGEE.DATE_CHARGEMENT,	
	T_CHARGEMENT.code_secteur,	
	T_CHARGEMENT.CODE_TOURNEE,	
	T_CHARGEMENT.code_vendeur,	
	T_CHARGEMENT.VALID,	
	T_CHARGEMENT.MONTANT_A_VERSER,	
	T_SECTEUR.NOM_SECTEUR,	
	T_PRODUITS.NOM_PRODUIT,	
	T_PRODUITS.CODE_PRODUIT
ORDER BY 
	le_maximum_RANG ASC
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_chargement_periode(kwargs):
        query = '''
SELECT 
	T_CHARGEMENT.DATE_CHARGEMENT AS DATE_CHARGEMENT,	
	T_CHARGEMENT.code_secteur AS code_secteur,	
	T_CHARGEMENT.code_vendeur AS code_vendeur,	
	T_OPERATEUR.NOM_OPERATEUR AS NOM_OPERATEUR,	
	T_OPERATEUR.Matricule AS Matricule,	
	T_SECTEUR.NOM_SECTEUR AS NOM_SECTEUR
FROM 
	T_OPERATEUR,	
	T_CHARGEMENT,	
	T_SECTEUR
WHERE 
	T_SECTEUR.code_secteur = T_CHARGEMENT.code_secteur
	AND		T_OPERATEUR.CODE_OPERATEUR = T_CHARGEMENT.code_vendeur
	AND
	(
		T_CHARGEMENT.DATE_CHARGEMENT BETWEEN {Param_date1} AND {Param_date2}
		AND	T_CHARGEMENT.code_vendeur = {Param_code_vendeur}
	)
ORDER BY 
	DATE_CHARGEMENT ASC
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_chargement_secteur(kwargs):
        query = '''
SELECT 
	T_PRODUITS_CHARGEE.CODE_CHARGEMENT AS CODE_CHARGEMENT,	
	T_PRODUITS_CHARGEE.DATE_CHARGEMENT AS DATE_CHARGEMENT,	
	T_PRODUITS_CHARGEE.code_secteur AS code_secteur,	
	T_PRODUITS_CHARGEE.TOTAL_CHARGEE AS TOTAL_CHARGEE,	
	T_PRODUITS_CHARGEE.TOTAL_GRATUIT AS TOTAL_GRATUIT,	
	T_PRODUITS_CHARGEE.TOTAL_DONS AS TOTAL_DONS,	
	T_PRODUITS_CHARGEE.TOTAL_REMISE AS TOTAL_REMISE,	
	T_PRODUITS_CHARGEE.TOTAL_RENDUS_AG AS TOTAL_RENDUS_AG,	
	T_PRODUITS_CHARGEE.TOTAL_RENDUS_US AS TOTAL_RENDUS_US,	
	T_PRODUITS_CHARGEE.TOTAL_RENDUS_COM AS TOTAL_RENDUS_COM,	
	T_PRODUITS_CHARGEE.TOTAL_RENDUS_SP AS TOTAL_RENDUS_SP,	
	T_PRODUITS_CHARGEE.TOTAL_INVENDU_POINTE AS TOTAL_INVENDU_POINTE,	
	T_PRODUITS_CHARGEE.PRIX AS PRIX,	
	T_PRODUITS_CHARGEE.CODE_ARTICLE AS CODE_ARTICLE,	
	T_OPERATEUR.NOM_OPERATEUR AS NOM_OPERATEUR,	
	T_PRODUITS_CHARGEE.CREDIT AS CREDIT,	
	T_PRODUITS_CHARGEE.QTE_ECART AS QTE_ECART,	
	T_CHARGEMENT.code_vendeur AS code_vendeur
FROM 
	T_CHARGEMENT,	
	T_PRODUITS_CHARGEE,	
	T_OPERATEUR
WHERE 
	T_OPERATEUR.CODE_OPERATEUR = T_CHARGEMENT.code_vendeur
	AND		T_CHARGEMENT.CODE_CHARGEMENT = T_PRODUITS_CHARGEE.CODE_CHARGEMENT
	AND
	(
		T_PRODUITS_CHARGEE.DATE_CHARGEMENT = {Param_date_chargement}
		AND	T_PRODUITS_CHARGEE.code_secteur = {Param_code_secteur}
	)
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_cheque_non_envoyer(kwargs):
        query = '''
SELECT 
	T_DECOMPTE.NUM_DECOMPTE AS NUM_DECOMPTE,	
	T_DECOMPTE.DATE_DECOMPTE AS DATE_DECOMPTE,	
	T_DECOMPTE.MONTANT AS MONTANT,	
	T_DECOMPTE.REFERENCE AS REFERENCE,	
	T_DECOMPTE.CODE_CLIENT AS CODE_CLIENT,	
	T_DT_DECOMPTE.GP_CLIENT AS GP_CLIENT,	
	T_DT_DECOMPTE.LE_TIRE AS LE_TIRE,	
	T_DT_DECOMPTE.TYPE AS TYPE,	
	T_DT_DECOMPTE.MOTIF_ENVOI AS MOTIF_ENVOI,	
	T_CLIENTS.NOM_CLIENT AS NOM_CLIENT
FROM 
	T_DT_DECOMPTE,	
	T_DECOMPTE,	
	T_CLIENTS
WHERE 
	T_DECOMPTE.NUM_DECOMPTE = T_DT_DECOMPTE.NUM_DECOMPTE
	AND		T_CLIENTS.CODE_CLIENT = T_DECOMPTE.CODE_CLIENT
	AND
	(
		T_DT_DECOMPTE.MOTIF_ENVOI <> 1
	)
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_client_cac_journee(kwargs):
        query = '''
SELECT DISTINCT 
	T_LIVRAISON.CODE_CLIENT AS CODE_CLIENT,	
	T_CLIENTS.CAT_CLIENT AS CAT_CLIENT,	
	T_CLIENTS.CLIENT_EN_COMPTE AS CLIENT_EN_COMPTE,	
	T_SOUS_SECTEUR.code_secteur AS code_secteur
FROM 
	T_LIVRAISON,	
	T_SOUS_SECTEUR,	
	T_CLIENTS
WHERE 
	T_SOUS_SECTEUR.CODE_SOUS_SECTEUR = T_CLIENTS.SOUS_SECTEUR
	AND		T_CLIENTS.CODE_CLIENT = T_LIVRAISON.CODE_CLIENT
	AND
	(
		T_LIVRAISON.DATE_VALIDATION = {Param_dt}
		AND	T_LIVRAISON.TYPE_MVT IN ('L', 'R') 
		AND	T_LIVRAISON.DATE_LIVRAISON = {Param_date_livraison}
	)
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_client_not_int(kwargs):
        query = '''
SELECT 
	T_CLIENTS.CODE_CLIENT AS CODE_CLIENT,	
	T_CLIENTS.NOM_CLIENT AS NOM_CLIENT,	
	T_CLIENTS.ADRESSE AS ADRESSE,	
	T_CLIENTS.ACTIF AS ACTIF,	
	T_SOUS_SECTEUR.NOM_SOUS_SECTEUR AS NOM_SOUS_SECTEUR,	
	T_SOUS_SECTEUR.code_secteur AS code_secteur
FROM 
	T_SOUS_SECTEUR,	
	T_CLIENTS
WHERE 
	T_SOUS_SECTEUR.CODE_SOUS_SECTEUR = T_CLIENTS.SOUS_SECTEUR
	AND
	(
		T_CLIENTS.ACTIF = 1
		AND	T_CLIENTS.CODE_CLIENT <> 0
		AND	T_CLIENTS.CODE_CLIENT NOT IN ({Param_code_clt}) 
		AND	T_SOUS_SECTEUR.code_secteur = {Param_code_secteur}
	)
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_clients_n1(kwargs):
        query = '''
SELECT DISTINCT 
	T_MOY_VENTE_CLIENTS.CODE_CLIENT AS CODE_CLIENT,	
	T_CLIENTS.CAT_CLIENT AS CAT_CLIENT,	
	T_SOUS_SECTEUR.code_secteur AS code_secteur,	
	T_MOY_VENTE_CLIENTS.DATE_VENTE AS DATE_VENTE
FROM 
	T_MOY_VENTE_CLIENTS,	
	T_SOUS_SECTEUR,	
	T_CLIENTS
WHERE 
	T_CLIENTS.CODE_CLIENT = T_MOY_VENTE_CLIENTS.CODE_CLIENT
	AND		T_SOUS_SECTEUR.CODE_SOUS_SECTEUR = T_CLIENTS.SOUS_SECTEUR
	AND
	(
		T_MOY_VENTE_CLIENTS.DATE_VENTE = {Param_date}
	)
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_code_chargement(kwargs):
        query = '''
SELECT 
	T_CHARGEMENT.CODE_CHARGEMENT AS CODE_CHARGEMENT,	
	T_CHARGEMENT.DATE_CHARGEMENT AS DATE_CHARGEMENT,	
	T_CHARGEMENT.code_secteur AS code_secteur
FROM 
	T_CHARGEMENT
WHERE 
	T_CHARGEMENT.DATE_CHARGEMENT = {Param_date_chargement}
	AND	T_CHARGEMENT.code_secteur = {Param_code_secteur}
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_codification_operation(kwargs):
        query = '''
SELECT 
	MAX(T_OPERATIONS.CODE_OPERATION) AS le_maximum_CODE_OPERATION
FROM 
	T_OPERATIONS
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_commande_gms_date(kwargs):
        query = '''
SELECT 
	T_COMMANDES.CODE_CLIENT AS CODE_CLIENT,	
	T_COMMANDES.DATE_LIVRAISON AS DATE_LIVRAISON,	
	T_COMMANDES.code_secteur AS code_secteur,	
	T_PRODUITS_COMMANDES.CODE_ARTICLE AS CODE_ARTICLE,	
	T_ARTICLES.LIBELLE_COURT AS LIBELLE_COURT,	
	SUM(T_PRODUITS_COMMANDES.QTE_U) AS la_somme_QTE_U,	
	SUM(T_PRODUITS_COMMANDES.QTE_C) AS la_somme_QTE_C,	
	T_COMMANDES.TYPE_COMMANDE AS TYPE_COMMANDE
FROM 
	T_COMMANDES,	
	T_PRODUITS_COMMANDES,	
	T_ARTICLES
WHERE 
	T_COMMANDES.ID_COMMANDE = T_PRODUITS_COMMANDES.ID_COMMANDE
	AND		T_ARTICLES.CODE_ARTICLE = T_PRODUITS_COMMANDES.CODE_ARTICLE
	AND
	(
		T_COMMANDES.CODE_CLIENT = {Param_code_client}
		AND	T_COMMANDES.DATE_LIVRAISON = {Param_date_livraison}
		AND	T_COMMANDES.code_secteur = {Param_code_secteur}
		AND	T_COMMANDES.TYPE_COMMANDE = 'C'
	)
GROUP BY 
	T_COMMANDES.CODE_CLIENT,	
	T_COMMANDES.DATE_LIVRAISON,	
	T_PRODUITS_COMMANDES.CODE_ARTICLE,	
	T_ARTICLES.LIBELLE_COURT,	
	T_COMMANDES.code_secteur,	
	T_COMMANDES.TYPE_COMMANDE
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_commande_secteur(kwargs):
        query = '''
SELECT 
	T_COMMANDES.DATE_LIVRAISON AS DATE_LIVRAISON,	
	T_COMMANDES.code_secteur AS code_secteur,	
	T_PRODUITS_COMMANDES.CODE_ARTICLE AS CODE_ARTICLE,	
	SUM(T_PRODUITS_COMMANDES.QTE_U) AS la_somme_QTE_U,	
	SUM(T_PRODUITS_COMMANDES.QTE_C) AS la_somme_QTE_C,	
	T_COMMANDES.TYPE_COMMANDE AS TYPE_COMMANDE
FROM 
	T_COMMANDES,	
	T_PRODUITS_COMMANDES
WHERE 
	T_COMMANDES.ID_COMMANDE = T_PRODUITS_COMMANDES.ID_COMMANDE
	AND
	(
		T_COMMANDES.DATE_LIVRAISON = {Param_date_livraison}
		AND	T_COMMANDES.code_secteur = {Param_code_secteur}
		AND	T_COMMANDES.TYPE_COMMANDE = 'S'
	)
GROUP BY 
	T_COMMANDES.DATE_LIVRAISON,	
	T_COMMANDES.code_secteur,	
	T_PRODUITS_COMMANDES.CODE_ARTICLE,	
	T_COMMANDES.TYPE_COMMANDE
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_commande_secteur_article(kwargs):
        query = '''
SELECT 
	T_COMMANDES.DATE_LIVRAISON AS DATE_LIVRAISON,	
	T_COMMANDES.code_secteur AS code_secteur,	
	T_PRODUITS_COMMANDES.CODE_ARTICLE AS CODE_ARTICLE,	
	SUM(T_PRODUITS_COMMANDES.QTE_U) AS la_somme_QTE_U,	
	SUM(T_PRODUITS_COMMANDES.QTE_C) AS la_somme_QTE_C
FROM 
	T_COMMANDES,	
	T_PRODUITS_COMMANDES
WHERE 
	T_COMMANDES.ID_COMMANDE = T_PRODUITS_COMMANDES.ID_COMMANDE
	AND
	(
		T_COMMANDES.DATE_LIVRAISON = {Param_date_livraison}
		AND	T_COMMANDES.code_secteur = {Param_code_secteur}
		AND	T_PRODUITS_COMMANDES.CODE_ARTICLE = {Param_code_article}
	)
GROUP BY 
	T_COMMANDES.DATE_LIVRAISON,	
	T_COMMANDES.code_secteur,	
	T_PRODUITS_COMMANDES.CODE_ARTICLE
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_commande_secteur_produit(kwargs):
        query = '''
SELECT 
	T_COMMANDES.DATE_LIVRAISON AS DATE_LIVRAISON,	
	T_COMMANDES.code_secteur AS code_secteur,	
	T_ARTICLES.CODE_PRODUIT AS CODE_PRODUIT,	
	SUM(T_PRODUITS_COMMANDES.QTE_U) AS la_somme_QTE_U,	
	SUM(T_PRODUITS_COMMANDES.QTE_C) AS la_somme_QTE_C
FROM 
	T_COMMANDES,	
	T_PRODUITS_COMMANDES,	
	T_ARTICLES
WHERE 
	T_ARTICLES.CODE_ARTICLE = T_PRODUITS_COMMANDES.CODE_ARTICLE
	AND		T_COMMANDES.ID_COMMANDE = T_PRODUITS_COMMANDES.ID_COMMANDE
	AND
	(
		T_COMMANDES.DATE_LIVRAISON = {Param_date_livraison}
		AND	T_COMMANDES.code_secteur = {Param_code_secteur}
		AND	T_ARTICLES.CODE_PRODUIT = {Param_code_produit}
	)
GROUP BY 
	T_COMMANDES.DATE_LIVRAISON,	
	T_COMMANDES.code_secteur,	
	T_ARTICLES.CODE_PRODUIT
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_commande_usine_date(kwargs):
        query = '''
SELECT 
	T_COMMANDES.DATE_LIVRAISON AS DATE_LIVRAISON,	
	T_PRODUITS_COMMANDES.CODE_ARTICLE AS CODE_ARTICLE,	
	T_COMMANDES.TYPE_COMMANDE AS TYPE_COMMANDE,	
	T_ARTICLES.LIBELLE_COURT AS LIBELLE_COURT,	
	SUM(T_PRODUITS_COMMANDES.QTE_U) AS la_somme_QTE_U,	
	SUM(T_PRODUITS_COMMANDES.QTE_C) AS la_somme_QTE_C,	
	T_ARTICLES.RANG AS RANG
FROM 
	T_COMMANDES,	
	T_PRODUITS_COMMANDES,	
	T_ARTICLES
WHERE 
	T_ARTICLES.CODE_ARTICLE = T_PRODUITS_COMMANDES.CODE_ARTICLE
	AND		T_COMMANDES.ID_COMMANDE = T_PRODUITS_COMMANDES.ID_COMMANDE
	AND
	(
		T_COMMANDES.DATE_LIVRAISON = {Param_date_livraison}
		AND	T_COMMANDES.TYPE_COMMANDE = 'U'
	)
GROUP BY 
	T_COMMANDES.DATE_LIVRAISON,	
	T_PRODUITS_COMMANDES.CODE_ARTICLE,	
	T_ARTICLES.LIBELLE_COURT,	
	T_COMMANDES.TYPE_COMMANDE,	
	T_ARTICLES.RANG
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_cond_charge_operateur(kwargs):
        query = '''
SELECT 
	T_COND_CHARGEE.CODE_OPERATEUR AS CODE_OPERATEUR,	
	T_COND_CHARGEE.DATE_CHARGEMENT AS DATE_CHARGEMENT,	
	T_COND_CHARGEE.CODE_COND AS CODE_COND,	
	SUM(T_COND_CHARGEE.QTE_CHARGEE) AS la_somme_QTE_CHARGEE,	
	SUM(T_COND_CHARGEE.QTE_RETOUR) AS la_somme_QTE_RETOUR,	
	SUM(T_COND_CHARGEE.QTE_CHAR_SUPP) AS la_somme_QTE_CHAR_SUPP,	
	SUM(T_COND_CHARGEE.QTE_POINTE) AS la_somme_QTE_POINTE,	
	SUM(T_COND_CHARGEE.CREDIT) AS la_somme_CREDIT
FROM 
	T_COND_CHARGEE
WHERE 
	T_COND_CHARGEE.CODE_COND = {Param_code_cond}
	AND	T_COND_CHARGEE.DATE_CHARGEMENT = {Param_date_mvt}
GROUP BY 
	T_COND_CHARGEE.CODE_OPERATEUR,	
	T_COND_CHARGEE.CODE_COND,	
	T_COND_CHARGEE.DATE_CHARGEMENT
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_cond_chargee(kwargs):
        query = '''
SELECT 
	T_CHARGEMENT.DATE_CHARGEMENT AS DATE_CHARGEMENT,	
	T_COND_CHARGEE.code_secteur AS code_secteur,	
	T_COND_CHARGEE.CODE_COND AS CODE_COND,	
	T_COND_CHARGEE.QTE_CHARGEE AS QTE_CHARGEE,	
	T_COND_CHARGEE.QTE_CHARGEE_VAL AS QTE_CHARGEE_VAL,	
	T_COND_CHARGEE.CODE_CHARGEMENT AS CODE_CHARGEMENT,	
	T_COND_CHARGEE.CODE_OPERATEUR AS CODE_OPERATEUR,	
	T_COND_CHARGEE.ECART AS ECART,	
	T_COND_CHARGEE.QTE_CHAR_SUPP AS QTE_CHAR_SUPP,	
	T_COND_CHARGEE.CREDIT AS CREDIT,	
	T_COND_CHARGEE.QTE_POINTE AS QTE_POINTE
FROM 
	T_CHARGEMENT,	
	T_COND_CHARGEE
WHERE 
	T_CHARGEMENT.CODE_CHARGEMENT = T_COND_CHARGEE.CODE_CHARGEMENT
	AND
	(
		T_COND_CHARGEE.code_secteur = {Param_code_secteur}
		AND	T_COND_CHARGEE.CODE_COND = {Paramcode_cp}
		AND	T_CHARGEMENT.DATE_CHARGEMENT = {Param_date_chargement}
	)
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_cond_livraison(kwargs):
        query = '''
UPDATE 
	T_COND_LIVRAISON
SET
	QTE_IMPORTE = {Param_qte_chargee},	
	QTE_CHARGEE = {Param_qte_chargee}
WHERE 
	T_COND_LIVRAISON.NUM_LIVRAISON = {Param_num_livraison}
	AND	T_COND_LIVRAISON.CODE_CP = {Param_code_cp}
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_cond_livraison_client(kwargs):
        query = '''
SELECT 
	T_COND_LIVRAISON.CODE_CLIENT AS CODE_CLIENT,	
	T_LIVRAISON.DATE_LIVRAISON AS DATE_LIVRAISON,	
	T_COND_LIVRAISON.CODE_CP AS CODE_CP,	
	SUM(T_COND_LIVRAISON.QTE_IMPORTE) AS la_somme_QTE_IMPORTE
FROM 
	T_LIVRAISON,	
	T_COND_LIVRAISON
WHERE 
	T_LIVRAISON.NUM_LIVRAISON = T_COND_LIVRAISON.NUM_LIVRAISON
	AND
	(
		T_COND_LIVRAISON.CODE_CLIENT = {Param_code_client}
		AND	T_LIVRAISON.DATE_LIVRAISON = {Param_date_livraison}
		AND	T_LIVRAISON.STATUT <> 'A'
	)
GROUP BY 
	T_COND_LIVRAISON.CODE_CLIENT,	
	T_LIVRAISON.DATE_LIVRAISON,	
	T_COND_LIVRAISON.CODE_CP
        '''
        return query.format(**kwargs)

    @staticmethod
    def req_conseigne_deconseige(kwargs):
        query = '''
SELECT 
	T_REGELEMENT_COND.DATE_VALIDATION AS DATE_VALIDATION,	
	T_REGELEMENT_COND.CODE_OPERTAEUR AS CODE_OPERTAEUR,	
	SUM(T_REGELEMENT_COND.REGLER_C_STD) AS la_somme_REGLER_C_STD,	
	SUM(T_REGELEMENT_COND.MONTANT_REGLER) AS la_somme_MONTANT_REGLER,	
	SUM(T_REGELEMENT_COND.REGLER_P_AG) AS la_somme_REGLER_P_AG,	
	SUM(T_REGELEMENT_COND.REGLER_P_UHT) AS la_somme_REGLER_P_UHT,	
	SUM(T_REGELEMENT_COND.REGLER_C_AG) AS la_somme_REGLER_C_AG,	
	SUM(T_REGELEMENT_COND.REGLER_C_PR) AS la_somme_REGLER_C_PR,	
	SUM(T_REGELEMENT_COND.REGLER_C_BLC) AS la_somme_REGLER_C_BLC,	
	SUM(T_REGELEMENT_COND.REGLER_P_EURO) AS la_somme_REGLER_P_EURO
FROM 
	T_REGELEMENT_COND
WHERE 
	T_REGELEMENT_COND.CODE_OPERTAEUR = {Param_code_operateur}
	AND	T_REGELEMENT_COND.DATE_VALIDATION BETWEEN {Param_dt1} AND {Param_dt2}
GROUP BY 
	T_REGELEMENT_COND.CODE_OPERTAEUR,	
	T_REGELEMENT_COND.DATE_VALIDATION
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_contrubition_canal(kwargs):
        query = '''
SELECT 
	T_ARTICLES.CODE_PRODUIT AS CODE_PRODUIT,	
	T_STATISTIQUES.CATEGORIE AS CATEGORIE,	
	SUM(( T_STATISTIQUES.VENTE + T_STATISTIQUES.VENTE_CAC ) ) AS la_somme_VENTE
FROM 
	T_ARTICLES,	
	T_STATISTIQUES
WHERE 
	T_ARTICLES.CODE_ARTICLE = T_STATISTIQUES.CODE_ARTICLE
	AND
	(
		T_STATISTIQUES.DATE_JOURNEE BETWEEN {Param_dt1} AND {Param_dt2}
	)
GROUP BY 
	T_STATISTIQUES.CATEGORIE,	
	T_ARTICLES.CODE_PRODUIT
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_date_dispo_statistiques(kwargs):
        query = '''
SELECT 
	MAX(T_STATISTIQUES.DATE_JOURNEE) AS le_maximum_DATE_JOURNEE
FROM 
	T_STATISTIQUES
WHERE 
	T_STATISTIQUES.DATE_JOURNEE BETWEEN {Param_dt1} AND {Param_dt2}
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_date_distribution_remise(kwargs):
        query = '''
SELECT 
	T_FACTURE.CODE_CLIENT AS CODE_CLIENT,	
	MAX(T_FACTURE.DATE_HEURE) AS le_maximum_DATE_HEURE,	
	SUM(( T_DT_FACTURE.QTE_REMISE * T_DT_FACTURE.PRIX ) ) AS MT_REPARTI
FROM 
	T_FACTURE,	
	T_DT_FACTURE,	
	T_CLIENTS,	
	T_SOUS_SECTEUR,	
	T_SECTEUR,	
	T_BLOC,	
	T_ZONE
WHERE 
	T_FACTURE.NUM_FACTURE = T_DT_FACTURE.NUM_FACTURE
	AND		T_CLIENTS.CODE_CLIENT = T_FACTURE.CODE_CLIENT
	AND		T_SOUS_SECTEUR.CODE_SOUS_SECTEUR = T_CLIENTS.SOUS_SECTEUR
	AND		T_SECTEUR.code_secteur = T_SOUS_SECTEUR.code_secteur
	AND		T_BLOC.CODE_BLOC = T_SECTEUR.CODE_BLOC
	AND		T_ZONE.CODE_ZONE = T_BLOC.CODE_ZONE
	AND
	(
		T_FACTURE.VALID = 1
		AND	T_FACTURE.DATE_HEURE BETWEEN {Param_dt1} AND {Param_dt2}
		AND	T_DT_FACTURE.QTE_REMISE > 0
		AND	T_SECTEUR.code_secteur = {Param_code_secteur}
		AND	T_ZONE.CODE_SUPERVISEUR = {Param_code_superviseur}
		AND	T_ZONE.RESP_VENTE = {Param_resp_vente}
	)
GROUP BY 
	T_FACTURE.CODE_CLIENT
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_decompte_operateur_journee(kwargs):
        query = '''
SELECT 
	T_DECOMPTE.CODE_OPERATEUR AS CODE_OPERATEUR,	
	T_DECOMPTE.DATE_DECOMPTE AS DATE_DECOMPTE,	
	T_DECOMPTE.MODE_PAIEMENT AS MODE_PAIEMENT,	
	T_DECOMPTE.MONTANT AS MONTANT
FROM 
	T_DECOMPTE
WHERE 
	T_DECOMPTE.CODE_OPERATEUR = {Param_code_operateur}
	AND	T_DECOMPTE.DATE_DECOMPTE = {Param_date_decompte}
	AND	T_DECOMPTE.MODE_PAIEMENT = 'E'
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_dernier_chargement(kwargs):
        query = '''
SELECT TOP 5 
	T_CHARGEMENT.DATE_CHARGEMENT AS DATE_CHARGEMENT,	
	T_CHARGEMENT.code_secteur AS code_secteur,	
	T_CHARGEMENT.CODE_TOURNEE AS CODE_TOURNEE
FROM 
	T_CHARGEMENT
WHERE 
	T_CHARGEMENT.code_secteur = {Param_code_secteur}
ORDER BY 
	DATE_CHARGEMENT DESC
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_dernier_maj_stock(kwargs):
        query = '''
SELECT 
	T_SECTEUR.code_secteur AS code_secteur,	
	T_SECTEUR.DERNIER_MAJ AS DERNIER_MAJ
FROM 
	T_SECTEUR
WHERE 
	T_SECTEUR.code_secteur = {Param_cde_secteur}
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_dernier_rib(kwargs):
        query = '''
SELECT DISTINCT TOP 5 
	T_DECOMPTE.CODE_CLIENT AS CODE_CLIENT,	
	T_DT_DECOMPTE.GP_CLIENT AS GP_CLIENT,	
	T_DT_DECOMPTE.RIB AS RIB
FROM 
	T_DECOMPTE,	
	T_DT_DECOMPTE
WHERE 
	T_DECOMPTE.NUM_DECOMPTE = T_DT_DECOMPTE.NUM_DECOMPTE
	AND
	(
		T_DECOMPTE.CODE_CLIENT = {Param_code_client}
		AND	T_DT_DECOMPTE.GP_CLIENT = {Param_gp_client}
	)
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_det_borderau_valeurs(kwargs):
        query = '''
SELECT 
	T_DT_BORDEREAU.ID_BORDEREAU AS ID_BORDEREAU,	
	T_DT_BORDEREAU.NUM_DECOMPTE AS NUM_DECOMPTE,	
	T_DECOMPTE.MONTANT AS MONTANT,	
	T_DECOMPTE.REFERENCE AS REFERENCE,	
	T_DT_DECOMPTE.LE_TIRE AS LE_TIRE
FROM 
	T_DECOMPTE,	
	T_DT_DECOMPTE,	
	T_DT_BORDEREAU
WHERE 
	T_DECOMPTE.NUM_DECOMPTE = T_DT_BORDEREAU.NUM_DECOMPTE
	AND		T_DECOMPTE.NUM_DECOMPTE = T_DT_DECOMPTE.NUM_DECOMPTE
	AND
	(
		T_DT_BORDEREAU.ID_BORDEREAU = {Param_id_bordereau}
	)
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_dt_articles(kwargs):
        query = '''
SELECT 
	T_ARTICLES.CODE_ARTICLE AS CODE_ARTICLE,	
	T_ARTICLES.CODE_BARRE AS CODE_BARRE,	
	T_ARTICLES.RANG AS RANG,	
	T_ARTICLES.LIBELLE_COURT AS LIBELLE_COURT,	
	T_ARTICLES.LIBELLE AS LIBELLE,	
	T_ARTICLES.ABREVIATION AS ABREVIATION,	
	T_ARTICLES.GP_ARTICLE AS GP_ARTICLE,	
	T_ARTICLES.CODE_PRODUIT AS CODE_PRODUIT,	
	T_ARTICLES.CODE_AROME AS CODE_AROME,	
	T_ARTICLES.TYPE_CAISSE AS TYPE_CAISSE,	
	T_ARTICLES.TYPE_PALETTE AS TYPE_PALETTE,	
	T_ARTICLES.TVA AS TVA,	
	T_ARTICLES.AFF_REPARTITION AS AFF_REPARTITION,	
	T_ARTICLES.AFF_COMMANDE AS AFF_COMMANDE,	
	T_ARTICLES.QTE_PACK AS QTE_PACK,	
	T_ARTICLES.QTE_PALETTE AS QTE_PALETTE,	
	T_ARTICLES.POIDS AS POIDS,	
	T_ARTICLES.CONDITIONNEMENT AS CONDITIONNEMENT,	
	T_ARTICLES.ACTIF AS ACTIF,	
	T_PRIX.PRIX AS PRIX_VENTE,	
	T_PRIX.CODE_AGCE AS CODE_AGCE,	
	T_FAMILLE.CODE_FAMILLE AS CODE_FAMILLE,	
	T_FAMILLE.CODE_GAMME AS CODE_GAMME,	
	T_ARTICLES.ACTIF_GLOBALE AS ACTIF_GLOBALE,	
	T_ARTICLES.CONDITIONNEMENT2 AS CONDITIONNEMENT2,	
	T_ARTICLES.QTE_PALETTE2 AS QTE_PALETTE2,	
	T_PRODUITS.NOM_PRODUIT AS NOM_PRODUIT,	
	T_FAMILLE.NOM_FAMILLE AS NOM_FAMILLE,	
	T_GAMME.NOM_GAMME AS NOM_GAMME
FROM 
	T_GAMME,	
	T_FAMILLE,	
	T_PRODUITS,	
	T_ARTICLES,	
	T_PRIX
WHERE 
	T_GAMME.CODE_GAMME = T_FAMILLE.CODE_GAMME
	AND		T_FAMILLE.CODE_FAMILLE = T_PRODUITS.CODE_FAMILLE
	AND		T_PRODUITS.CODE_PRODUIT = T_ARTICLES.CODE_PRODUIT
	AND		T_ARTICLES.CODE_ARTICLE = T_PRIX.CODE_ARTICLE
	AND
	(
		T_PRIX.CODE_AGCE = {Param_code_agence}
		AND	T_ARTICLES.ACTIF_GLOBALE = 1
		AND	T_PRIX.Date_Debut <= {param_dt}
		AND	T_PRIX.Date_Fin >= {param_dt}
	)
ORDER BY 
	RANG ASC
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_dt_caisserie_secteur(kwargs):
        query = '''
SELECT 
	T_CHARGEMENT.DATE_CHARGEMENT AS DATE_CHARGEMENT,	
	T_COND_CHARGEE.CODE_OPERATEUR AS CODE_OPERATEUR,	
	T_SECTEUR.NOM_SECTEUR AS NOM_SECTEUR,	
	T_COND_CHARGEE.CODE_COND AS CODE_COND,	
	T_COND_CHARGEE.QTE_CHARGEE_VAL AS QTE_CHARGEE_VAL,	
	T_COND_CHARGEE.QTE_CHAR_SUPP AS QTE_CHAR_SUPP,	
	T_COND_CHARGEE.QTE_RETOUR AS QTE_RETOUR
FROM 
	T_CHARGEMENT,	
	T_COND_CHARGEE,	
	T_SECTEUR
WHERE 
	T_SECTEUR.code_secteur = T_CHARGEMENT.code_secteur
	AND		T_CHARGEMENT.CODE_CHARGEMENT = T_COND_CHARGEE.CODE_CHARGEMENT
	AND
	(
		T_CHARGEMENT.DATE_CHARGEMENT BETWEEN {Param_dt1} AND {Param_dt2}
		AND	T_COND_CHARGEE.CODE_OPERATEUR = {Param_code_operateur}
	)
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_dt_courrier(kwargs):
        query = '''
SELECT 
	T_DT_COURRIER_AGENCE.ID_ENVOI AS ID_ENVOI,	
	T_DT_COURRIER_AGENCE.TYPE_OP AS TYPE_OP,	
	T_DT_COURRIER_AGENCE.SOUS_TYPE AS SOUS_TYPE,	
	T_DT_COURRIER_AGENCE.ID_OPERATION AS ID_OPERATION,	
	T_DT_COURRIER_AGENCE.ID_AFFICHER AS ID_AFFICHER
FROM 
	T_DT_COURRIER_AGENCE
WHERE 
	T_DT_COURRIER_AGENCE.ID_ENVOI = {Param_id_envoi}
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_dt_decompte(kwargs):
        query = '''
UPDATE 
	T_DT_DECOMPTE
SET
	MOTIF_ENVOI = {Param_motif}
WHERE 
	T_DT_DECOMPTE.NUM_DECOMPTE = {Param_num_decompte}
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_dt_facture_client(kwargs):
        query = '''
SELECT 
	T_DT_FACTURE.NUM_FACTURE AS NUM_FACTURE,	
	T_DT_FACTURE.CODE_ARTICLE AS CODE_ARTICLE,	
	T_ARTICLES.RANG AS RANG,	
	T_ARTICLES.LIBELLE AS LIBELLE,	
	T_DT_FACTURE.PRIX AS PRIX,	
	T_DT_FACTURE.QTE_VENTE AS QTE_VENTE,	
	T_DT_FACTURE.QTE_PERTE AS QTE_PERTE,	
	T_DT_FACTURE.QTE_PROMO AS QTE_PROMO,	
	T_DT_FACTURE.QTE_REMISE AS QTE_REMISE,	
	T_DT_FACTURE.TX_GRATUIT AS TX_GRATUIT,	
	T_ARTICLES.TVA AS TVA
FROM 
	T_ARTICLES,	
	T_DT_FACTURE
WHERE 
	T_ARTICLES.CODE_ARTICLE = T_DT_FACTURE.CODE_ARTICLE
	AND
	(
		T_DT_FACTURE.NUM_FACTURE = {Param_num_facture}
	)
ORDER BY 
	RANG ASC
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_dt_mouvement_cond(kwargs):
        query = '''
SELECT 
	T_MOUVEMENTS_CAISSERIE.ID_MOUVEMENT AS ID_MOUVEMENT,	
	T_MOUVEMENTS_CAISSERIE.CODE_MAGASIN AS CODE_MAGASIN,	
	T_MOUVEMENTS_CAISSERIE.CODE_CP AS CODE_CP,	
	T_MOUVEMENTS_CAISSERIE.ORIGINE AS ORIGINE,	
	T_MOUVEMENTS_CAISSERIE.QTE_THEORIQUE AS QTE_THEORIQUE,	
	T_MOUVEMENTS_CAISSERIE.QTE_REEL AS QTE_REEL,	
	T_MOUVEMENTS_CAISSERIE.QTE_ECART AS QTE_ECART,	
	T_CAISSES_PALETTES.NOM_TYPE AS NOM_TYPE,	
	T_MOUVEMENTS_CAISSERIE.QTE_MOUVEMENT AS QTE_MOUVEMENT,	
	T_MOUVEMENTS_CAISSERIE.PRIX AS PRIX,	
	T_MOUVEMENTS_CAISSERIE.MONTANT_ECART AS MONTANT_ECART,	
	T_OPERATEUR.NOM_OPERATEUR AS NOM_OPERATEUR,	
	T_MOUVEMENTS_CAISSERIE.COMPTE_ECART AS COMPTE_ECART
FROM 
	T_OPERATEUR,	
	T_MOUVEMENTS_CAISSERIE,	
	T_CAISSES_PALETTES
WHERE 
	T_CAISSES_PALETTES.CODE_TYPE = T_MOUVEMENTS_CAISSERIE.CODE_CP
	AND		T_OPERATEUR.CODE_OPERATEUR = T_MOUVEMENTS_CAISSERIE.COMPTE_ECART
	AND
	(
		T_MOUVEMENTS_CAISSERIE.ORIGINE = {Param_origine}
	)
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_dt_operation(kwargs):
        query = '''
SELECT 
	T_MOUVEMENTS.ID_MOUVEMENT AS ID_MOUVEMENT,	
	T_MOUVEMENTS.ORIGINE AS ORIGINE,	
	T_MOUVEMENTS.CODE_ARTICLE AS CODE_ARTICLE,	
	T_MOUVEMENTS.QTE_THEORIQUE AS QTE_THEORIQUE,	
	T_MOUVEMENTS.QTE_REEL AS QTE_REEL,	
	T_MOUVEMENTS.QTE_ECART AS QTE_ECART,	
	T_ARTICLES.LIBELLE AS LIBELLE,	
	T_MOUVEMENTS.QTE_CAISSE AS QTE_CAISSE,	
	T_MOUVEMENTS.QTE_PAL AS QTE_PAL,	
	T_MOUVEMENTS.CODE_MAGASIN AS CODE_MAGASIN,	
	T_MOUVEMENTS.COMPTE_ECART AS COMPTE_ECART,	
	T_MOUVEMENTS.QTE_MOUVEMENT AS QTE_MOUVEMENT,	
	T_MOUVEMENTS.TYPE_PRODUIT AS TYPE_PRODUIT,	
	T_MOUVEMENTS.MOTIF AS MOTIF,	
	T_MOUVEMENTS.MONTANT AS MONTANT,	
	T_MOUVEMENTS.PRIX AS PRIX,	
	T_MOUVEMENTS.MONTANT_ECART AS MONTANT_ECART,	
	T_OPERATEUR.NOM_OPERATEUR AS NOM_OPERATEUR,	
	T_PRODUITS.CODE_PRODUIT AS CODE_PRODUIT,	
	T_PRODUITS.NOM_PRODUIT AS NOM_PRODUIT
FROM 
	T_PRODUITS,	
	T_ARTICLES,	
	T_MOUVEMENTS,	
	T_OPERATEUR
WHERE 
	T_OPERATEUR.CODE_OPERATEUR = T_MOUVEMENTS.COMPTE_ECART
	AND		T_ARTICLES.CODE_ARTICLE = T_MOUVEMENTS.CODE_ARTICLE
	AND		T_PRODUITS.CODE_PRODUIT = T_ARTICLES.CODE_PRODUIT
	AND
	(
		T_MOUVEMENTS.ORIGINE = {Param_origine}
		AND	T_MOUVEMENTS.TYPE_PRODUIT = {Paramtype_produit}
	)
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_dt_prelevement(kwargs):
        query = '''
SELECT 
	T_DT_PRELEVEMENT_COND.ID_PRELEVEMENT AS ID_PRELEVEMENT,	
	T_DT_PRELEVEMENT_COND.CODE_OPERATEUR AS CODE_OPERATEUR,	
	T_DT_PRELEVEMENT_COND.SUSP_VENTE AS SUSP_VENTE,	
	T_DT_PRELEVEMENT_COND.SOLDE_STD AS SOLDE_STD,	
	T_DT_PRELEVEMENT_COND.SOLDE_AGR AS SOLDE_AGR,	
	T_DT_PRELEVEMENT_COND.SOLDE_PRM AS SOLDE_PRM,	
	T_DT_PRELEVEMENT_COND.SOLDE_PAG AS SOLDE_PAG,	
	T_DT_PRELEVEMENT_COND.SOLDE_PUHT AS SOLDE_PUHT,	
	T_DT_PRELEVEMENT_COND.SOLDE_CS1 AS SOLDE_CS1,	
	T_DT_PRELEVEMENT_COND.DECON_STD AS DECON_STD,	
	T_DT_PRELEVEMENT_COND.DECON_AGR AS DECON_AGR,	
	T_DT_PRELEVEMENT_COND.DECON_PRM AS DECON_PRM,	
	T_DT_PRELEVEMENT_COND.DECON_PAG AS DECON_PAG,	
	T_DT_PRELEVEMENT_COND.DECON_PUHT AS DECON_PUHT,	
	T_DT_PRELEVEMENT_COND.DECON_CS1 AS DECON_CS1,	
	T_DT_PRELEVEMENT_COND.PRIME_STD AS PRIME_STD,	
	T_DT_PRELEVEMENT_COND.PRIME_AGR AS PRIME_AGR,	
	T_DT_PRELEVEMENT_COND.PRIME_PRM AS PRIME_PRM,	
	T_DT_PRELEVEMENT_COND.PRIME_PAG AS PRIME_PAG,	
	T_DT_PRELEVEMENT_COND.PRIME_PUHT AS PRIME_PUHT,	
	T_OPERATEUR.Matricule AS Matricule,	
	T_OPERATEUR.NOM_OPERATEUR AS NOM_OPERATEUR,	
	T_FONCTION.NOM_FONCTION AS NOM_FONCTION,	
	T_DT_PRELEVEMENT_COND.SOLDE_EURO AS SOLDE_EURO,	
	T_DT_PRELEVEMENT_COND.SOLDE_CBL AS SOLDE_CBL,	
	T_DT_PRELEVEMENT_COND.DECON_EURO AS DECON_EURO,	
	T_DT_PRELEVEMENT_COND.DECON_CBL AS DECON_CBL
FROM 
	T_FONCTION,	
	T_OPERATEUR,	
	T_DT_PRELEVEMENT_COND
WHERE 
	T_FONCTION.CODE_FONCTION = T_OPERATEUR.FONCTION
	AND		T_OPERATEUR.CODE_OPERATEUR = T_DT_PRELEVEMENT_COND.CODE_OPERATEUR
	AND
	(
		T_DT_PRELEVEMENT_COND.ID_PRELEVEMENT = {Param_id_prelevement}
	)
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_dt_promo_tranche_article(kwargs):
        query = '''
SELECT 
	T_DT_PROMO_TRANCHE.ID_PROMO AS ID_PROMO,	
	T_DT_PROMO_TRANCHE.CODE_ARTICLE AS CODE_ARTICLE,	
	T_DT_PROMO_TRANCHE.TRANCHE AS TRANCHE,	
	T_DT_PROMO_TRANCHE.GRATUIT AS GRATUIT,	
	T_DT_PROMO_TRANCHE.TX_GRATUIT AS TX_GRATUIT
FROM 
	T_DT_PROMO_TRANCHE
WHERE 
	T_DT_PROMO_TRANCHE.ID_PROMO = {Param_ID_PROMO}
	AND	T_DT_PROMO_TRANCHE.CODE_ARTICLE = {Param_CODE_ARTICLE}
ORDER BY 
	TRANCHE DESC
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_dt_reclamation(kwargs):
        query = '''
SELECT 
	T_DT_RECLAMATION.ID_RECLAMATION AS ID_RECLAMATION,	
	T_MOTIF_RECLAMATION.LIBELLE AS LIBELLE
FROM 
	T_MOTIF_RECLAMATION,	
	T_DT_RECLAMATION
WHERE 
	T_MOTIF_RECLAMATION.ID_MOTIF = T_DT_RECLAMATION.ID_MOTIF
	AND
	(
		T_DT_RECLAMATION.ID_RECLAMATION = {Param_id_reclamation}
	)
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_dt_rendus(kwargs):
        query = '''
SELECT 
	T_LIGNE_RETOUR_RENDUS.ID_RETOUR AS ID_RETOUR,	
	T_LIGNE_RETOUR_RENDUS.CODE_ARTICLE AS CODE_ARTICLE,	
	T_LIGNE_RETOUR_RENDUS.CATEGORIE AS CATEGORIE,	
	T_LIGNE_RETOUR_RENDUS.QTE_AGCE AS QTE_AGCE,	
	T_LIGNE_RETOUR_RENDUS.COMPT1 AS COMPT1,	
	T_LIGNE_RETOUR_RENDUS.COMPT2 AS COMPT2,	
	T_LIGNE_RETOUR_RENDUS.ECART AS ECART,	
	( T_LIGNE_RETOUR_RENDUS.PRIX * T_LIGNE_RETOUR_RENDUS.ECART )  AS VAL_ECART,	
	T_ARTICLES.LIBELLE AS LIBELLE
FROM 
	T_ARTICLES,	
	T_LIGNE_RETOUR_RENDUS
WHERE 
	T_ARTICLES.CODE_ARTICLE = T_LIGNE_RETOUR_RENDUS.CODE_ARTICLE
	AND
	(
		T_LIGNE_RETOUR_RENDUS.ID_RETOUR = {Param_id_retour}
	)
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_dt_retour(kwargs):
        query = '''
SELECT 
	T_LIGNE_RETOUR_CAISSERIE.ID_RETOUR AS ID_RETOUR,	
	T_LIGNE_RETOUR_CAISSERIE.CODE_CP AS CODE_CP,	
	T_LIGNE_RETOUR_CAISSERIE.QTE_AGCE AS QTE_AGCE,	
	T_LIGNE_RETOUR_CAISSERIE.COMPT1 AS COMPT1,	
	T_LIGNE_RETOUR_CAISSERIE.COMPT2 AS COMPT2,	
	T_LIGNE_RETOUR_CAISSERIE.ECART AS ECART,	
	T_CAISSES_PALETTES.NOM_TYPE AS NOM_TYPE,	
	T_CAISSES_PALETTES.RANG AS RANG
FROM 
	T_CAISSES_PALETTES,	
	T_LIGNE_RETOUR_CAISSERIE
WHERE 
	T_CAISSES_PALETTES.CODE_TYPE = T_LIGNE_RETOUR_CAISSERIE.CODE_CP
	AND
	(
		T_LIGNE_RETOUR_CAISSERIE.ID_RETOUR = {Param_id_retour}
	)
ORDER BY 
	RANG ASC
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_ecarts(kwargs):
        query = '''
SELECT 
	T_RETOURS_USINE.ID_RETOUR AS ID_RETOUR,	
	T_RETOURS_USINE.DATE_RETOUR AS DATE_RETOUR,	
	T_RETOURS_USINE.CATEGORIE AS CATEGORIE,	
	T_RETOURS_USINE.COMPTE_ECART AS COMPTE_ECART,	
	T_RETOURS_USINE.VALID AS VALID,	
	T_RETOURS_USINE.REF_OPERATION AS REF_OPERATION,	
	T_OPERATEUR.NOM_OPERATEUR AS NOM_OPERATEUR,	
	T_OPERATIONS.COMPTE_ECART AS CMPTE_ECART,	
	CONT.NOM_OPERATEUR AS CONTROLEUR,	
	SUM(( T_LIGNE_RETOUR_RENDUS.ECART * T_LIGNE_RETOUR_RENDUS.PRIX ) ) AS la_somme_ECART
FROM 
	(
		(
			(
				T_RETOURS_USINE
				INNER JOIN
				T_LIGNE_RETOUR_RENDUS
				ON T_RETOURS_USINE.ID_RETOUR = T_LIGNE_RETOUR_RENDUS.ID_RETOUR
			)
			LEFT OUTER JOIN
			T_OPERATIONS
			ON T_OPERATIONS.CODE_OPERATION = T_RETOURS_USINE.ID_RETOUR
		)
		LEFT OUTER JOIN
		T_OPERATEUR
		ON T_RETOURS_USINE.COMPTE_ECART = T_OPERATEUR.CODE_OPERATEUR
	)
	LEFT OUTER JOIN
	T_OPERATEUR CONT
	ON CONT.CODE_OPERATEUR = T_OPERATIONS.COMPTE_ECART
WHERE 
	(
	T_RETOURS_USINE.VALID = {Param_valid}
	AND	T_RETOURS_USINE.CATEGORIE = {Param_egal_categorie}
	AND	T_RETOURS_USINE.CATEGORIE <> {Param_diff_categorie}
)
GROUP BY 
	T_RETOURS_USINE.ID_RETOUR,	
	T_RETOURS_USINE.DATE_RETOUR,	
	T_RETOURS_USINE.CATEGORIE,	
	T_RETOURS_USINE.COMPTE_ECART,	
	T_RETOURS_USINE.VALID,	
	T_RETOURS_USINE.REF_OPERATION,	
	T_OPERATEUR.NOM_OPERATEUR,	
	T_OPERATIONS.COMPTE_ECART,	
	CONT.NOM_OPERATEUR
HAVING 
	SUM(( T_LIGNE_RETOUR_RENDUS.ECART * T_LIGNE_RETOUR_RENDUS.PRIX ) ) < 0
OR	SUM(( T_LIGNE_RETOUR_RENDUS.ECART * T_LIGNE_RETOUR_RENDUS.PRIX ) ) > 0
ORDER BY 
	DATE_RETOUR DESC
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_ecarts_caisserie(kwargs):
        query = '''
SELECT DISTINCT 
	T_RETOURS_USINE.ID_RETOUR AS ID_RETOUR,	
	T_RETOURS_USINE.DATE_RETOUR AS DATE_RETOUR,	
	T_RETOURS_USINE.CATEGORIE AS CATEGORIE,	
	T_RETOURS_USINE.COMPTE_ECART AS COMPTE_ECART,	
	T_RETOURS_USINE.VALID AS VALID,	
	T_RETOURS_USINE.REF_OPERATION AS REF_OPERATION,	
	T_OPERATEUR.NOM_OPERATEUR AS NOM_OPERATEUR,	
	T_OPERATIONS.COMPTE_ECART AS CMPTE_ECART,	
	CONT.NOM_OPERATEUR AS CONTROLEUR
FROM 
	(
		(
			(
				T_RETOURS_USINE
				INNER JOIN
				T_LIGNE_RETOUR_CAISSERIE
				ON T_RETOURS_USINE.ID_RETOUR = T_LIGNE_RETOUR_CAISSERIE.ID_RETOUR
			)
			LEFT OUTER JOIN
			T_OPERATIONS
			ON T_OPERATIONS.CODE_OPERATION = T_RETOURS_USINE.ID_RETOUR
		)
		LEFT OUTER JOIN
		T_OPERATEUR
		ON T_RETOURS_USINE.COMPTE_ECART = T_OPERATEUR.CODE_OPERATEUR
	)
	LEFT OUTER JOIN
	T_OPERATEUR CONT
	ON CONT.CODE_OPERATEUR = T_OPERATIONS.COMPTE_ECART
WHERE 
	(
	T_RETOURS_USINE.VALID = {Param_valid}
	AND	T_RETOURS_USINE.CATEGORIE = {Param_egal_categorie}
	AND	T_RETOURS_USINE.CATEGORIE <> {Param_diff_categorie}
	AND	T_LIGNE_RETOUR_CAISSERIE.ECART <> 0
)
ORDER BY 
	DATE_RETOUR DESC
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_ecarts_inventaire_par_magasin(kwargs):
        query = '''
SELECT 
	T_MOUVEMENTS.DATE_MVT AS DATE_MVT,	
	T_MOUVEMENTS.CODE_MAGASIN AS CODE_MAGASIN,	
	T_MOUVEMENTS.CODE_ARTICLE AS CODE_ARTICLE,	
	T_MOUVEMENTS.TYPE_MOUVEMENT AS TYPE_MOUVEMENT,	
	SUM(T_MOUVEMENTS.QTE_ECART) AS la_somme_QTE_ECART,	
	T_MOUVEMENTS.TYPE_PRODUIT AS TYPE_PRODUIT
FROM 
	T_MOUVEMENTS
WHERE 
	T_MOUVEMENTS.DATE_MVT = {Param_date_mvt}
	AND	T_MOUVEMENTS.TYPE_MOUVEMENT = 'I'
GROUP BY 
	T_MOUVEMENTS.CODE_MAGASIN,	
	T_MOUVEMENTS.DATE_MVT,	
	T_MOUVEMENTS.CODE_ARTICLE,	
	T_MOUVEMENTS.TYPE_MOUVEMENT,	
	T_MOUVEMENTS.TYPE_PRODUIT
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_etat_borderau_valeurs(kwargs):
        query = '''
SELECT 
	T_DT_BORDEREAU.ID_BORDEREAU AS ID_BORDEREAU,	
	T_DT_BORDEREAU.NUM_DECOMPTE AS NUM_DECOMPTE,	
	T_DECOMPTE.MONTANT AS MONTANT,	
	T_DECOMPTE.REFERENCE AS REFERENCE,	
	T_DT_DECOMPTE.LE_TIRE AS LE_TIRE,	
	T_BORDEREAU_VALEURS.NUM_BORDEAU_BANQUE AS NUM_BORDEAU_BANQUE,	
	T_BORDEREAU_VALEURS.DATE_HEURE_SAISIE AS DATE_HEURE_SAISIE
FROM 
	T_BORDEREAU_VALEURS,	
	T_DECOMPTE,	
	T_DT_DECOMPTE,	
	T_DT_BORDEREAU
WHERE 
	T_BORDEREAU_VALEURS.ID_BORDEREAU = T_DT_BORDEREAU.ID_BORDEREAU
	AND		T_DECOMPTE.NUM_DECOMPTE = T_DT_BORDEREAU.NUM_DECOMPTE
	AND		T_DECOMPTE.NUM_DECOMPTE = T_DT_DECOMPTE.NUM_DECOMPTE
	AND
	(
		T_DT_BORDEREAU.ID_BORDEREAU = {Param_id_bordereau}
	)
        '''
        return query.format(**kwargs)

    @staticmethod
    def req_etat_chargement(kwargs):
        query = '''
SELECT 
	T_CHARGEMENT.DATE_CHARGEMENT AS DATE_CHARGEMENT,	
	T_CHARGEMENT.code_secteur AS code_secteur,	
	T_CHARGEMENT.VALID AS VALID,	
	T_CHARGEMENT.CODE_CHARGEMENT AS CODE_CHARGEMENT,	
	T_CHARGEMENT.code_vendeur AS code_vendeur,	
	T_CHARGEMENT.code_chauffeur AS code_chauffeur,	
	T_CHARGEMENT.AIDE_VENDEUR1 AS AIDE_VENDEUR1,	
	T_CHARGEMENT.AIDE_VENDEUR2 AS AIDE_VENDEUR2,	
	T_CHARGEMENT.vehicule AS vehicule
FROM 
	T_CHARGEMENT
WHERE 
	T_CHARGEMENT.DATE_CHARGEMENT = {Param_date_chargement}
	AND	T_CHARGEMENT.code_secteur = {Param_code_secteur}
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_etat_journee(kwargs):
        query = '''
SELECT 
	T_JOURNEE.DATE_JOURNEE AS DATE_JOURNEE,	
	T_JOURNEE.CODE_AGCE AS CODE_AGCE,	
	T_JOURNEE.STOCK AS STOCK,	
	T_JOURNEE.SOLDE_EMB AS SOLDE_EMB,	
	T_JOURNEE.CLOTURE AS CLOTURE,	
	T_JOURNEE.JOURNEE_TEMP AS JOURNEE_TEMP,	
	T_JOURNEE.SOLDE_CAISSERIE AS SOLDE_CAISSERIE
FROM 
	T_JOURNEE
WHERE 
	T_JOURNEE.DATE_JOURNEE = {Param_date_journee}
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_etat_synchro(kwargs):
        query = '''
SELECT 
	T_SYNCHRO.ID_JOB AS ID_JOB,	
	T_SYNCHRO.OPERATION AS OPERATION,	
	T_SYNCHRO.SOUS_OPERATION AS SOUS_OPERATION,	
	T_SYNCHRO.ETAT AS ETAT,	
	T_SYNCHRO.ID_OPERATION AS ID_OPERATION
FROM 
	T_SYNCHRO
WHERE 
	T_SYNCHRO.OPERATION = {Param_OPERATION}
	AND	T_SYNCHRO.SOUS_OPERATION = {Param_SOUS_OPERATION}
	AND	T_SYNCHRO.ID_OPERATION = {Param_ID_OPERATION}
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_etat_validation_remise(kwargs):
        query = '''
SELECT 
	T_REMISE_CLIENT.Date_Debut AS Date_Debut,	
	T_REMISE_CLIENT.STATUT AS STATUT
FROM 
	T_REMISE_CLIENT
WHERE 
	T_REMISE_CLIENT.Date_Debut = {Param_DATE_DEBUT}
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_export_invendu_rendus(kwargs):
        query = '''
SELECT 
	T_ARTICLES.CODE_ARTICLE AS CODE_ARTICLE,	
	T_ARTICLES.RANG AS RANG,	
	T_ARTICLES.LIBELLE_COURT AS LIBELLE_COURT,	
	SUM(T_PRODUITS_CHARGEE.TOTAL_INVENDU_POINTE) AS INVENDU,	
	SUM(T_PRODUITS_CHARGEE.TOTAL_RENDUS_POINTE) AS TOTAL_RENDUS,	
	SUM(T_PRODUITS_CHARGEE.TOTAL_RENDUS_COM) AS RENDUS_COM,	
	SUM(T_PRODUITS_CHARGEE.TOTAL_RENDUS_US) AS RENDUS_US,	
	SUM(T_PRODUITS_CHARGEE.TOTAL_RENDUS_AG) AS RENDUS_AG,	
	SUM(T_PRODUITS_CHARGEE.TOTAL_RENDUS_SP) AS RENDUS_SP
FROM 
	T_ARTICLES
	LEFT OUTER JOIN
	T_PRODUITS_CHARGEE
	ON T_ARTICLES.CODE_ARTICLE = T_PRODUITS_CHARGEE.CODE_ARTICLE
WHERE 
	(
	T_ARTICLES.ACTIF = 1
	AND	T_PRODUITS_CHARGEE.DATE_CHARGEMENT = {Param_date}
)
GROUP BY 
	T_ARTICLES.LIBELLE_COURT,	
	T_ARTICLES.RANG,	
	T_ARTICLES.CODE_ARTICLE
ORDER BY 
	RANG ASC
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_facture_periode(kwargs):
        query = '''
SELECT 
	T_FACTURE.CODE_CLIENT AS CODE_CLIENT,	
	MIN(T_ARTICLES.RANG) AS le_minimum_RANG,	
	T_CLIENTS.NOM_CLIENT AS NOM_CLIENT,	
	T_DT_FACTURE.PRIX AS PRIX,	
	T_ARTICLES.CODE_BARRE AS CODE_BARRE,	
	T_ARTICLES.LIBELLE AS NOM_PRODUIT,	
	T_ARTICLES.TVA AS TVA,	
	SUM(( ( ( T_DT_FACTURE.QTE_VENTE - T_DT_FACTURE.QTE_PERTE ) - T_DT_FACTURE.QTE_PROMO ) * T_DT_FACTURE.PRIX ) ) AS MT,	
	SUM(( ( ( ( ( T_DT_FACTURE.QTE_VENTE - T_DT_FACTURE.QTE_PERTE ) - T_DT_FACTURE.QTE_PROMO ) * T_DT_FACTURE.PRIX ) * T_DT_FACTURE.TX_GRATUIT ) /  100) ) AS REMISE_SF,	
	SUM(T_DT_FACTURE.QTE_VENTE) AS la_somme_QTE_VENTE,	
	SUM(T_DT_FACTURE.QTE_PERTE) AS la_somme_QTE_PERTE,	
	SUM(T_DT_FACTURE.QTE_PROMO) AS la_somme_QTE_PROMO,	
	SUM(T_DT_FACTURE.QTE_REMISE) AS la_somme_QTE_REMISE,	
	SUM(( ( T_DT_FACTURE.QTE_VENTE - T_DT_FACTURE.QTE_PROMO ) - T_DT_FACTURE.QTE_PERTE ) ) AS la_somme_QTE
FROM 
	T_FACTURE,	
	T_DT_FACTURE,	
	T_CLIENTS,	
	T_ARTICLES,	
	T_PRODUITS
WHERE 
	T_PRODUITS.CODE_PRODUIT = T_ARTICLES.CODE_PRODUIT
	AND		T_ARTICLES.CODE_ARTICLE = T_DT_FACTURE.CODE_ARTICLE
	AND		T_CLIENTS.CODE_CLIENT = T_FACTURE.CODE_CLIENT
	AND		T_FACTURE.NUM_FACTURE = T_DT_FACTURE.NUM_FACTURE
	AND
	(
		T_FACTURE.VALID = 1
		AND	T_FACTURE.CODE_CLIENT IN ({Param_code_client}) 
		AND	T_FACTURE.DATE_HEURE BETWEEN {Param_dt1} AND {Param_dt2}
	)
GROUP BY 
	T_FACTURE.CODE_CLIENT,	
	T_CLIENTS.NOM_CLIENT,	
	T_DT_FACTURE.PRIX,	
	T_ARTICLES.LIBELLE,	
	T_ARTICLES.TVA,	
	T_ARTICLES.CODE_BARRE
ORDER BY 
	CODE_CLIENT ASC,	
	le_minimum_RANG ASC
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_famille_gamme(kwargs):
        query = '''
SELECT 
	T_FAMILLE.CODE_FAMILLE AS CODE_FAMILLE,	
	T_FAMILLE.NOM_FAMILLE AS NOM_FAMILLE,	
	T_FAMILLE.CODE_GAMME AS CODE_GAMME
FROM 
	T_FAMILLE
WHERE 
	T_FAMILLE.CODE_GAMME = {Param_code_gamme}
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_get_id_det_mission(kwargs):
        query = '''
SELECT 
	T_Det_Mission.Id_Det_Mission AS Id_Det_Mission,	
	T_Det_Mission.Id_Trajet AS Id_Trajet,	
	T_Det_Mission.Id_Ordre_Mission AS Id_Ordre_Mission,	
	T_Trajet_Destintion.Id_Destination AS Id_Destination,	
	T_Trajet_Destintion.Id_Trajet AS Id_Trajet_T_,	
	T_Trajet_Destintion.Depart AS Depart
FROM 
	T_Trajet_Destintion,	
	T_Det_Mission
WHERE 
	T_Det_Mission.Id_Trajet = T_Trajet_Destintion.Id_Trajet
	AND
	(
		T_Trajet_Destintion.Depart = 0
		AND	T_Trajet_Destintion.Id_Destination = {Param_id_dest}
		AND	T_Det_Mission.Id_Ordre_Mission = {Param_id_ordre_mission}
	)
        '''
        return query.format(**kwargs)

    @staticmethod
    def REQ_Get_MissionBL_By_Ordre(kwargs):
        query = '''
SELECT 
	MAX(T_Mission_BL.Id_Det) AS MAX_Id_Det
FROM 
	T_Mission_BL
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_get_prevendeur_date(kwargs):
        query = '''
SELECT 
	T_COMMANDE_CLIENT.DATE_COMMANDE AS DATE_COMMANDE,	
	T_COMMANDE_CLIENT.CODE_PREVENDEUR AS CODE_PREVENDEUR
FROM 
	T_COMMANDE_CLIENT
WHERE 
	T_COMMANDE_CLIENT.DATE_COMMANDE = {Param_DATE_COMMANDE}
        '''
        return query.format(**kwargs)

    @staticmethod
    def REQ_GetEnseigne(kwargs):
        query = '''
SELECT DISTINCT 
	T_GROUP_CLIENTS.ID_GP_CLIENT AS ID_GP_CLIENT,	
	T_GROUP_CLIENTS.NOM_GROUP AS NOM_GROUP
FROM 
	T_GROUP_CLIENTS,	
	T_CLIENTS
WHERE 
	T_CLIENTS.GROUP_CLIENT = T_GROUP_CLIENTS.ID_GP_CLIENT
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_info_bl_mission(kwargs):
        query = '''
SELECT 
	T_Mission_BL.Id_Det_Mission AS Id_Det_Mission,	
	T_Mission_BL.Num_BL AS Num_BL,	
	T_Mission_BL.Id_Det AS Id_Det,	
	T_Mission_BL.Id_Type_Livraison AS Id_Type_Livraison,	
	T_Mission_BL.BL_Valider AS BL_Valider
FROM 
	T_Mission_BL
WHERE 
	T_Mission_BL.Num_BL = {Param_num_bl}
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_info_caisse(kwargs):
        query = '''
SELECT 
	T_CAISSE.CODE_CAISSE AS CODE_CAISSE,	
	T_CAISSE.VALEUR_ACT AS VALEUR_ACT
FROM 
	T_CAISSE
WHERE 
	T_CAISSE.CODE_CAISSE = {Param_code_caisse}
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_info_chargement(kwargs):
        query = '''
SELECT 
	T_CHARGEMENT.CODE_CHARGEMENT AS CODE_CHARGEMENT,	
	T_CHARGEMENT.DATE_CHARGEMENT AS DATE_CHARGEMENT,	
	T_CHARGEMENT.code_secteur AS code_secteur,	
	T_CHARGEMENT.CODE_TOURNEE AS CODE_TOURNEE,	
	T_CHARGEMENT.vehicule AS vehicule,	
	T_CHARGEMENT.code_vendeur AS code_vendeur,	
	T_CHARGEMENT.code_chauffeur AS code_chauffeur,	
	T_CHARGEMENT.AIDE_VENDEUR1 AS AIDE_VENDEUR1,	
	T_CHARGEMENT.AIDE_VENDEUR2 AS AIDE_VENDEUR2,	
	T_OPERATEUR.NOM_OPERATEUR AS NOM_OPERATEUR,	
	T_SECTEUR.NOM_SECTEUR AS NOM_SECTEUR,	
	T_TOURNEES.NOM_TOURNEE AS NOM_TOURNEE,	
	T_CHARGEMENT.MONTANT_A_VERSER AS MONTANT_A_VERSER,	
	T_SECTEUR.CAT_SECTEUR AS CAT_SECTEUR,	
	T_SECTEUR.RANG AS RANG,	
	T_CHARGEMENT.VALID AS VALID
FROM 
	T_SECTEUR,	
	T_TOURNEES,	
	T_CHARGEMENT,	
	T_OPERATEUR
WHERE 
	T_OPERATEUR.CODE_OPERATEUR = T_CHARGEMENT.code_vendeur
	AND		T_SECTEUR.code_secteur = T_CHARGEMENT.code_secteur
	AND		T_SECTEUR.code_secteur = T_TOURNEES.code_secteur
	AND
	(
		T_CHARGEMENT.CODE_CHARGEMENT = {Param_code_chargement}
	)
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_info_client(kwargs):
        query = '''
SELECT 
	T_CLIENTS.CODE_CLIENT AS CODE_CLIENT,	
	T_CLIENTS.SOLDE_PRODUITS AS SOLDE_PRODUITS,	
	T_CLIENTS.SOLDE_CONDITIONNEMENT AS SOLDE_CONDITIONNEMENT,	
	T_CLIENTS.SOLDE_C_STD AS SOLDE_C_STD,	
	T_CLIENTS.SOLDE_P_AG AS SOLDE_P_AG,	
	T_CLIENTS.SOLDE_P_UHT AS SOLDE_P_UHT,	
	T_CLIENTS.SOLDE_C_AG AS SOLDE_C_AG,	
	T_CLIENTS.SOLDE_C_PR AS SOLDE_C_PR,	
	T_SOUS_SECTEUR.code_secteur AS code_secteur,	
	T_CLIENTS.GROUP_CLIENT AS GROUP_CLIENT
FROM 
	T_SOUS_SECTEUR,	
	T_CLIENTS
WHERE 
	T_SOUS_SECTEUR.CODE_SOUS_SECTEUR = T_CLIENTS.SOUS_SECTEUR
	AND
	(
		T_CLIENTS.CODE_CLIENT = {Param_code_client}
	)
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_info_journee(kwargs):
        query = '''
SELECT 
	T_JOURNEE.DATE_JOURNEE AS DATE_JOURNEE,	
	T_JOURNEE.CODE_AGCE AS CODE_AGCE,	
	T_JOURNEE.STOCK AS STOCK,	
	T_JOURNEE.SOLDE_EMB AS SOLDE_EMB,	
	T_JOURNEE.CLOTURE AS CLOTURE,	
	T_JOURNEE.JOURNEE_TEMP AS JOURNEE_TEMP,	
	T_JOURNEE.SOLDE_CAISSE AS SOLDE_CAISSE,	
	T_JOURNEE.AS_C_STD AS AS_C_STD,	
	T_JOURNEE.AS_P_AG AS AS_P_AG,	
	T_JOURNEE.AS_P_UHT AS AS_P_UHT,	
	T_JOURNEE.AS_C_AG AS AS_C_AG,	
	T_JOURNEE.AS_C_PR AS AS_C_PR,	
	T_JOURNEE.NS_C_STD AS NS_C_STD,	
	T_JOURNEE.NS_P_AG AS NS_P_AG,	
	T_JOURNEE.NS_P_UHT AS NS_P_UHT,	
	T_JOURNEE.NS_C_AG AS NS_C_AG,	
	T_JOURNEE.NS_C_PR AS NS_C_PR,	
	T_JOURNEE.SOLDE_CAISSERIE AS SOLDE_CAISSERIE,	
	T_JOURNEE.AS_P_EURO AS AS_P_EURO,	
	T_JOURNEE.AS_CS_BLC AS AS_CS_BLC,	
	T_JOURNEE.NS_PAL_EURO AS NS_PAL_EURO,	
	T_JOURNEE.NS_CS_BLC AS NS_CS_BLC,	
	T_JOURNEE.AS_CS1 AS AS_CS1,	
	T_JOURNEE.AS_CS2 AS AS_CS2,	
	T_JOURNEE.NV_CS1 AS NV_CS1,	
	T_JOURNEE.NV_CS2 AS NV_CS2
FROM 
	T_JOURNEE
WHERE 
	T_JOURNEE.DATE_JOURNEE = {Param_date_journee}
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_info_mission(kwargs):
        query = '''
SELECT 
	T_Ordre_Mission_Agence.Id_Ordre_Mission AS Id_Ordre_Mission,	
	T_Ordre_Mission_Agence.Matricule_Vehicule AS Matricule_Vehicule,	
	T_Ordre_Mission_Agence.Date_Ordre AS Date_Ordre,	
	T_Ordre_Mission_Agence.Matricule_Semi AS Matricule_Semi,	
	T_Ordre_Mission_Agence.Mission_Fini AS Mission_Fini,	
	T_Ordre_Mission_Agence.Chauffeurs_Mission AS Chauffeurs_Mission,	
	T_Ordre_Mission_Agence.Scelle AS Scelle,	
	T_Ordre_Mission_Agence.Nom_Transporteur AS Nom_Transporteur,	
	T_Ordre_Mission_Agence.Type_Transport AS Type_Transport
FROM 
	T_Ordre_Mission_Agence
WHERE 
	T_Ordre_Mission_Agence.Id_Ordre_Mission = {Param_id_mission}
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_info_operateur(kwargs):
        query = '''
SELECT 
	T_OPERATEUR.CODE_OPERATEUR AS CODE_OPERATEUR,	
	T_OPERATEUR.SOLDE_PRODUITS AS SOLDE_PRODUITS,	
	T_OPERATEUR.SOLDE_CONDITIONNEMENT AS SOLDE_CONDITIONNEMENT,	
	T_OPERATEUR.SOLDE_C_STD AS SOLDE_C_STD,	
	T_OPERATEUR.SOLDE_P_AG AS SOLDE_P_AG,	
	T_OPERATEUR.SOLDE_P_UHT AS SOLDE_P_UHT,	
	T_OPERATEUR.SOLDE_C_AG AS SOLDE_C_AG,	
	T_OPERATEUR.SOLDE_C_PR AS SOLDE_C_PR,	
	T_OPERATEUR.NOM_OPERATEUR AS NOM_OPERATEUR
FROM 
	T_OPERATEUR
WHERE 
	T_OPERATEUR.CODE_OPERATEUR = {Param_code_operateur}
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_info_tournee_client(kwargs):
        query = '''
SELECT 
	T_SOUS_SECTEUR.code_secteur AS code_secteur,	
	T_ITINERAIRES.CODE_TOURNEE AS CODE_TOURNEE,	
	T_ITINERAIRES.CODE_CLIENT AS CODE_CLIENT,	
	T_TOURNEES.NOM_TOURNEE AS NOM_TOURNEE
FROM 
	T_TOURNEES,	
	T_ITINERAIRES,	
	T_CLIENTS,	
	T_SOUS_SECTEUR
WHERE 
	T_TOURNEES.CODE_TOURNEE = T_ITINERAIRES.CODE_TOURNEE
	AND		T_ITINERAIRES.CODE_CLIENT = T_CLIENTS.CODE_CLIENT
	AND		T_SOUS_SECTEUR.CODE_SOUS_SECTEUR = T_CLIENTS.SOUS_SECTEUR
	AND
	(
		T_SOUS_SECTEUR.code_secteur = {Param_code_secteur}
	)
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_info_trajet(kwargs):
        query = '''
SELECT 
	T_Hist_Trajet.Id_Ordre_Mission AS Id_Ordre_Mission,	
	T_Hist_Trajet.Lieu_Depart AS Lieu_Depart,	
	T_Hist_Trajet.Date_Heure_depart AS Date_Heure_depart,	
	T_Hist_Trajet.Scelle1 AS Scelle1,	
	T_Hist_Trajet.Lieu_Arrivee AS Lieu_Arrivee,	
	T_Hist_Trajet.Date_Heure_Arrivee AS Date_Heure_Arrivee,	
	T_Hist_Trajet.Scelle2 AS Scelle2,	
	T_Hist_Trajet.INDEX1 AS INDEX1,	
	T_Hist_Trajet.TEMP1 AS TEMP1,	
	T_Hist_Trajet.TEMP2 AS TEMP2,	
	T_Hist_Trajet.Date_effet_Depart AS Date_effet_Depart,	
	T_Hist_Trajet.Date_effet_Arrivee AS Date_effet_Arrivee
FROM 
	T_Hist_Trajet
WHERE 
	T_Hist_Trajet.Id_Ordre_Mission = {Param_id_mission}
	AND	T_Hist_Trajet.Lieu_Arrivee = {Param_arrivee}
	AND	T_Hist_Trajet.Lieu_Depart = {Param_depart}
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_itineraire(kwargs):
        query = '''
SELECT 
	T_ITINERAIRES.CODE_TOURNEE AS CODE_TOURNEE,	
	T_ITINERAIRES.CODE_CLIENT AS CODE_CLIENT,	
	T_ITINERAIRES.RANG AS RANG,	
	T_ITINERAIRES.RANG_PREVENTE AS RANG_PREVENTE
FROM 
	T_ITINERAIRES
WHERE 
	T_ITINERAIRES.CODE_TOURNEE = {Param_code_tournee}
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_jours_non_clos(kwargs):
        query = '''
SELECT 
	COUNT(T_JOURNEE.CLOTURE) AS Comptage_1,	
	T_JOURNEE.CODE_AGCE AS CODE_AGCE
FROM 
	T_JOURNEE
WHERE 
	T_JOURNEE.CLOTURE = 0
	AND	T_JOURNEE.CODE_AGCE = {Param_code_agence}
GROUP BY 
	T_JOURNEE.CODE_AGCE
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_lignes_commande(kwargs):
        query = '''
SELECT 
	T_LIGNE_COMMANDE.ID_COMMANDE AS ID_COMMANDE,	
	T_LIGNE_COMMANDE.CODE_ARTICLE AS CODE_ARTICLE,	
	T_LIGNE_COMMANDE.QTE_COMMANDE AS QTE_COMMANDE,	
	T_LIGNE_COMMANDE.STOCK AS STOCK,	
	T_LIGNE_COMMANDE.QTE_LIVREE AS QTE_LIVREE,	
	T_LIGNE_COMMANDE.QTE_PERTE AS QTE_PERTE,	
	T_LIGNE_COMMANDE.QTE_PROMO AS QTE_PROMO,	
	T_LIGNE_COMMANDE.TX_GRATUIT AS TX_GRATUIT,	
	( ( T_LIGNE_COMMANDE.QTE_LIVREE - T_LIGNE_COMMANDE.QTE_PERTE ) - T_LIGNE_COMMANDE.QTE_PROMO )  AS QTE_MVT,	
	( ( ( T_LIGNE_COMMANDE.QTE_LIVREE - T_LIGNE_COMMANDE.QTE_PERTE ) - T_LIGNE_COMMANDE.QTE_PROMO ) * T_LIGNE_COMMANDE.PRIX )  AS CA,	
	T_ARTICLES.LIBELLE AS LIBELLE,	
	T_ARTICLES.RANG AS RANG,	
	T_ARTICLES.TVA AS TVA,	
	T_LIGNE_COMMANDE.PRIX AS PRIX,	
	T_LIGNE_COMMANDE.REMISE AS REMISE,	
	T_ARTICLES.CODE_PRODUIT AS CODE_PRODUIT
FROM 
	T_ARTICLES,	
	T_LIGNE_COMMANDE
WHERE 
	T_ARTICLES.CODE_ARTICLE = T_LIGNE_COMMANDE.CODE_ARTICLE
	AND
	(
		T_LIGNE_COMMANDE.ID_COMMANDE = {Param_id_commande}
	)
ORDER BY 
	RANG ASC
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_livraison_articles(kwargs):
        query = '''
SELECT 
	T_PRODUITS_LIVREES.CODE_ARTICLE AS CODE_ARTICLE,	
	T_PRODUITS_LIVREES.CODE_CLIENT AS CODE_CLIENT,	
	T_PRODUITS_LIVREES.QTE_IMPORTE AS QTE_IMPORTE,	
	T_PRODUITS_LIVREES.QTE_CHARGEE AS QTE_CHARGEE,	
	T_PRODUITS_LIVREES.QTE_CAISSE AS QTE_CAISSE,	
	T_PRODUITS_LIVREES.QTE_PAL AS QTE_PAL,	
	T_PRODUITS_LIVREES.QTE_COMMANDE AS QTE_COMMANDE,	
	T_PRODUITS_LIVREES.MONTANT AS MONTANT,	
	T_PRODUITS_LIVREES.TYPE_CLIENT AS TYPE_CLIENT,	
	T_PRODUITS_LIVREES.code_vendeur AS code_vendeur,	
	T_PRODUITS_LIVREES.PRIX AS PRIX,	
	T_LIVRAISON.DATE_LIVRAISON AS DATE_LIVRAISON,	
	T_PRODUITS_LIVREES.TYPE_MVT AS TYPE_MVT,	
	T_LIVRAISON.STATUT AS STATUT
FROM 
	T_LIVRAISON,	
	T_PRODUITS_LIVREES
WHERE 
	T_LIVRAISON.NUM_LIVRAISON = T_PRODUITS_LIVREES.NUM_LIVRAISON
	AND
	(
		T_PRODUITS_LIVREES.CODE_ARTICLE = {Param_code_article}
		AND	T_PRODUITS_LIVREES.CODE_CLIENT = {Param_code_client}
		AND	T_LIVRAISON.DATE_LIVRAISON = {Param_date_livraison}
		AND	T_PRODUITS_LIVREES.TYPE_MVT = 'L'
		AND	T_LIVRAISON.STATUT <> 'A'
	)
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_livraison_cond(kwargs):
        query = '''
SELECT 
	T_MOUVEMENTS_CAISSERIE.CODE_CP AS CODE_CP,	
	T_MOUVEMENTS_CAISSERIE.ORIGINE AS ORIGINE,	
	T_MOUVEMENTS_CAISSERIE.QTE_THEORIQUE AS QTE_THEORIQUE,	
	T_MOUVEMENTS_CAISSERIE.QTE_REEL AS QTE_REEL,	
	T_MOUVEMENTS_CAISSERIE.QTE_MOUVEMENT AS QTE_MOUVEMENT
FROM 
	T_MOUVEMENTS_CAISSERIE
WHERE 
	T_MOUVEMENTS_CAISSERIE.CODE_CP = {Param_code_cp}
	AND	T_MOUVEMENTS_CAISSERIE.ORIGINE = {Param_origine}
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_livraison_conditionnement(kwargs):
        query = '''
SELECT 
	T_COND_LIVRAISON.CODE_CLIENT AS CODE_CLIENT,	
	T_COND_LIVRAISON.CODE_CP AS CODE_CP,	
	T_COND_LIVRAISON.CODE_MAGASIN AS CODE_MAGASIN,	
	T_COND_LIVRAISON.QTE_IMPORTE AS QTE_IMPORTE,	
	T_COND_LIVRAISON.QTE_CHARGEE AS QTE_CHARGEE,	
	T_COND_LIVRAISON.CODE_OPERATEUR AS CODE_OPERATEUR,	
	T_LIVRAISON.DATE_LIVRAISON AS DATE_LIVRAISON,	
	T_COND_LIVRAISON.TYPE_MVT AS TYPE_MVT
FROM 
	T_LIVRAISON,	
	T_COND_LIVRAISON
WHERE 
	T_LIVRAISON.NUM_LIVRAISON = T_COND_LIVRAISON.NUM_LIVRAISON
	AND
	(
		T_COND_LIVRAISON.CODE_CP = {Param_code_cp}
		AND	T_COND_LIVRAISON.CODE_CLIENT = {Param_code_client}
		AND	T_LIVRAISON.DATE_LIVRAISON = {Param_date_livraison}
		AND	T_COND_LIVRAISON.TYPE_MVT = 'L'
	)
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_livraison_global_client(kwargs):
        query = '''
SELECT 
	T_LIVRAISON.CODE_CLIENT AS CODE_CLIENT,	
	T_LIVRAISON.DATE_LIVRAISON AS DATE_LIVRAISON,	
	T_LIVRAISON.DATE_VALIDATION AS DATE_VALIDATION,	
	T_LIVRAISON.TYPE_MVT AS TYPE_MVT,	
	T_PRODUITS_LIVREES.CODE_ARTICLE AS CODE_ARTICLE,	
	SUM(T_PRODUITS_LIVREES.QTE_CHARGEE) AS la_somme_QTE_CHARGEE,	
	T_LIVRAISON.code_vendeur AS code_vendeur,	
	T_CLIENTS.NOM_CLIENT AS NOM_CLIENT,	
	T_CLIENTS.RANG AS RANG,	
	T_ARTICLES.LIBELLE AS LIBELLE,	
	T_ARTICLES.RANG AS RANG_T_
FROM 
	T_PRODUITS_LIVREES,	
	T_LIVRAISON,	
	T_CLIENTS,	
	T_ARTICLES
WHERE 
	T_PRODUITS_LIVREES.CODE_ARTICLE = T_ARTICLES.CODE_ARTICLE
	AND		T_CLIENTS.CODE_CLIENT = T_LIVRAISON.CODE_CLIENT
	AND		T_PRODUITS_LIVREES.NUM_LIVRAISON = T_LIVRAISON.NUM_LIVRAISON
	AND
	(
		T_LIVRAISON.DATE_LIVRAISON = {Param_date_livraison}
		AND	T_LIVRAISON.DATE_VALIDATION = {Param_date_validation}
		AND	T_LIVRAISON.CODE_CLIENT = {Param_code_client}
		AND	T_LIVRAISON.STATUT <> 'A'
	)
GROUP BY 
	T_LIVRAISON.DATE_LIVRAISON,	
	T_LIVRAISON.CODE_CLIENT,	
	T_LIVRAISON.DATE_VALIDATION,	
	T_LIVRAISON.TYPE_MVT,	
	T_PRODUITS_LIVREES.CODE_ARTICLE,	
	T_LIVRAISON.code_vendeur,	
	T_CLIENTS.NOM_CLIENT,	
	T_CLIENTS.RANG,	
	T_ARTICLES.LIBELLE,	
	T_ARTICLES.RANG
ORDER BY 
	RANG ASC,	
	RANG_T_ ASC
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_livraison_non_valider(kwargs):
        query = '''
SELECT 
	T_LIVRAISON.NUM_LIVRAISON AS NUM_LIVRAISON,	
	T_LIVRAISON.DATE_LIVRAISON AS DATE_LIVRAISON,	
	T_LIVRAISON.DATE_VALIDATION AS DATE_VALIDATION,	
	T_LIVRAISON.MOTIF_NON_VALIDATION AS MOTIF_NON_VALIDATION,	
	T_CLIENTS.NOM_CLIENT AS NOM_CLIENT,	
	T_LIVRAISON.code_secteur AS code_secteur,	
	T_LIVRAISON.TYPE_MVT AS TYPE_MVT,	
	T_CLIENTS.CAT_CLIENT AS CAT_CLIENT,	
	T_CLIENTS.CLIENT_EN_COMPTE AS CLIENT_EN_COMPTE
FROM 
	T_CLIENTS,	
	T_LIVRAISON
WHERE 
	T_CLIENTS.CODE_CLIENT = T_LIVRAISON.CODE_CLIENT
	AND
	(
		T_LIVRAISON.TYPE_MVT = 'L'
		AND	T_LIVRAISON.code_secteur = {Param_CODE_SECTEUR}
		AND	T_LIVRAISON.DATE_LIVRAISON = {Param_DATE_LIVRAISON}
		AND	T_LIVRAISON.DATE_VALIDATION = '19000101000000'
		AND	T_CLIENTS.CLIENT_EN_COMPTE = 1
		AND	T_CLIENTS.CAT_CLIENT <> 2
	)
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_livraisons_unique(kwargs):
        query = '''
SELECT DISTINCT 
	T_LIVRAISON.code_secteur AS code_secteur,	
	T_LIVRAISON.CODE_CLIENT AS CODE_CLIENT,	
	T_LIVRAISON.code_vendeur AS code_vendeur,	
	T_LIVRAISON.DATE_LIVRAISON AS DATE_LIVRAISON,	
	T_LIVRAISON.Type_Livraison AS Type_Livraison,	
	T_CLIENTS.CAT_CLIENT AS CAT_CLIENT,	
	T_CLIENTS.NOM_CLIENT AS NOM_CLIENT,	
	T_LIVRAISON.LIVRAISON_TOURNEE AS LIVRAISON_TOURNEE,	
	T_LIVRAISON.TYPE_MVT AS TYPE_MVT,	
	T_LIVRAISON.SUR_COMMANDE AS SUR_COMMANDE
FROM 
	T_CLIENTS,	
	T_LIVRAISON
WHERE 
	T_CLIENTS.CODE_CLIENT = T_LIVRAISON.CODE_CLIENT
	AND
	(
		T_LIVRAISON.code_secteur = {Param_code_secteur}
		AND	T_LIVRAISON.STATUT <> 'A'
		AND	T_LIVRAISON.DATE_LIVRAISON = {Param_date_livraison}
		AND	T_LIVRAISON.TYPE_MVT = 'L'
		AND	T_CLIENTS.CAT_CLIENT IN ({Param_cat_client}) 
		AND	T_LIVRAISON.LIVRAISON_TOURNEE = 0
		AND	T_LIVRAISON.SUR_COMMANDE = 1
	)
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_ls_aides_vendeur(kwargs):
        query = '''
SELECT 
	T_OPERATEUR.CODE_OPERATEUR AS CODE_OPERATEUR,	
	T_OPERATEUR.NOM_OPERATEUR AS NOM_OPERATEUR,	
	T_OPERATEUR.FONCTION AS FONCTION,	
	T_OPERATEUR.ACTIF AS ACTIF,	
	T_OPERATEUR.Matricule AS Matricule,	
	T_OPERATEUR.CODE_INTERNE AS CODE_INTERNE
FROM 
	T_OPERATEUR
WHERE 
	T_OPERATEUR.ACTIF = 1
	AND	T_OPERATEUR.FONCTION = 3
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_ls_alimentation_non_valide(kwargs):
        query = '''
SELECT 
	T_OPERATIONS_CAISSE.CODE_OPERATION AS CODE_OPERATION,	
	T_OPERATIONS_CAISSE.TYPE_OPERATION AS TYPE_OPERATION,	
	T_OPERATIONS_CAISSE.DATE_OPERATION AS DATE_OPERATION,	
	T_OPERATIONS_CAISSE.DATE_VALIDATION AS DATE_VALIDATION,	
	T_OPERATIONS_CAISSE.COMMENTAIRE AS COMMENTAIRE,	
	T_OPERATIONS_CAISSE.MONTANT AS MONTANT
FROM 
	T_OPERATIONS_CAISSE
WHERE 
	T_OPERATIONS_CAISSE.DATE_VALIDATION = '19000101000000'
	AND	T_OPERATIONS_CAISSE.TYPE_OPERATION = 'A'
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_ls_alimentation_valide(kwargs):
        query = '''
SELECT 
	T_OPERATIONS_CAISSE.CODE_OPERATION AS CODE_OPERATION,	
	T_OPERATIONS_CAISSE.TYPE_OPERATION AS TYPE_OPERATION,	
	T_OPERATIONS_CAISSE.DATE_OPERATION AS DATE_OPERATION,	
	T_OPERATIONS_CAISSE.DATE_VALIDATION AS DATE_VALIDATION,	
	T_OPERATIONS_CAISSE.COMMENTAIRE AS COMMENTAIRE,	
	T_OPERATIONS_CAISSE.MONTANT AS MONTANT
FROM 
	T_OPERATIONS_CAISSE
WHERE 
	T_OPERATIONS_CAISSE.DATE_VALIDATION <> {Param_date_validation}
	AND	T_OPERATIONS_CAISSE.TYPE_OPERATION = 'A'
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_ls_alimentations(kwargs):
        query = '''
SELECT 
	T_OPERATIONS_CAISSE.TYPE_OPERATION AS TYPE_OPERATION,	
	T_OPERATIONS_CAISSE.MONTANT AS MONTANT,	
	T_OPERATIONS_CAISSE.DATE_VALIDATION AS DATE_VALIDATION
FROM 
	T_OPERATIONS_CAISSE
WHERE 
	T_OPERATIONS_CAISSE.TYPE_OPERATION = 'A'
	AND	T_OPERATIONS_CAISSE.DATE_VALIDATION = {Param_date_validation}
        '''
        return query.format(**kwargs)

    @staticmethod
    def REQ_ls_appareil(kwargs):
        query = '''
SELECT 
	T_APPAREIL.CODE_APPAREIL AS CODE_APPAREIL,	
	T_APPAREIL.NUMERO_SERIE AS NUMERO_SERIE,	
	T_APPAREIL.NUMERO_SIM AS NUMERO_SIM,	
	T_APPAREIL.ICCID_SIM AS ICCID_SIM,	
	T_APPAREIL.PIN_SIM AS PIN_SIM,	
	T_APPAREIL.PUK_SIM AS PUK_SIM,	
	T_APPAREIL.FORFAIT_SIM AS FORFAIT_SIM,	
	T_APPAREIL.CODE_OPERATEUR AS CODE_OPERATEUR,	
	T_APPAREIL.CODE_AGCE AS CODE_AGCE,	
	T_APPAREIL.OBSERVATION AS OBSERVATION,	
	T_APPAREIL.LOGIN_RDP AS LOGIN_RDP,	
	T_APPAREIL.PWD_RDP AS PWD_RDP,	
	T_APPAREIL.DATE_ADD AS DATE_ADD,	
	T_APPAREIL.DATE_ACCEPTATION AS DATE_ACCEPTATION,	
	T_APPAREIL.DATE_ARRET AS DATE_ARRET,	
	T_APPAREIL.LAST_CONNECTION AS LAST_CONNECTION
FROM 
	T_APPAREIL
WHERE 
	T_APPAREIL.CODE_APPAREIL = {pAppareil}
	AND	ISNULL(T_APPAREIL.CODE_OPERATEUR , -1)  = {pOperateur_Moins1PourNull}
ORDER BY
	NUMERO_SERIE
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_ls_articles(kwargs):
        query = '''
SELECT 
	T_ARTICLES.CODE_ARTICLE AS CODE_ARTICLE,	
	T_ARTICLES.LIBELLE AS LIBELLE,	
	T_ARTICLES.GP_ARTICLE AS GP_ARTICLE,	
	T_ARTICLES.CODE_PRODUIT AS CODE_PRODUIT,	
	T_ARTICLES.CODE_AROME AS CODE_AROME,	
	T_ARTICLES.TYPE_CAISSE AS TYPE_CAISSE,	
	T_ARTICLES.TYPE_PALETTE AS TYPE_PALETTE,	
	T_ARTICLES.QTE_PACK AS QTE_PACK,	
	T_ARTICLES.QTE_PALETTE AS QTE_PALETTE,	
	T_ARTICLES.CONDITIONNEMENT AS CONDITIONNEMENT,	
	T_ARTICLES.ACTIF AS ACTIF,	
	T_ARTICLES.RANG AS RANG,	
	T_ARTICLES.AFF_REPARTITION AS AFF_REPARTITION,	
	T_ARTICLES.AFF_COMMANDE AS AFF_COMMANDE,	
	T_ARTICLES.LIBELLE_COURT AS LIBELLE_COURT,	
	T_ARTICLES.ABREVIATION AS ABREVIATION,	
	T_FAMILLE.CODE_FAMILLE AS CODE_FAMILLE,	
	T_FAMILLE.CODE_GAMME AS CODE_GAMME,	
	T_PRODUITS.NOM_PRODUIT AS NOM_PRODUIT,	
	T_PRODUITS.RANG AS RANG_PRODUIT,	
	T_PRIX.PRIX AS PRIX_VENTE,	
	T_ARTICLES.CONDITIONNEMENT2 AS CONDITIONNEMENT2,	
	T_ARTICLES.QTE_PALETTE2 AS QTE_PALETTE2,	
	T_ARTICLES.CODE_BARRE AS CODE_BARRE,	
	T_ARTICLES.TX_COUVERTURE AS TX_COUVERTURE,	
	T_FAMILLE.CONTRAT AS CONTRAT,	
	T_ARTICLES.COMMANDE_MIN AS COMMANDE_MIN
FROM 
	T_ARTICLES,	
	T_PRIX,	
	T_PRODUITS,	
	T_FAMILLE
WHERE 
	T_FAMILLE.CODE_FAMILLE = T_PRODUITS.CODE_FAMILLE
	AND		T_PRODUITS.CODE_PRODUIT = T_ARTICLES.CODE_PRODUIT
	AND		T_ARTICLES.CODE_ARTICLE = T_PRIX.CODE_ARTICLE
	AND
	(
		T_ARTICLES.ACTIF = 1
		AND	T_PRIX.Date_Debut <= {Param_dt}
		AND	T_PRIX.Date_Fin >= {Param_dt}
	)
ORDER BY 
	RANG ASC
        '''
        return query.format(**kwargs)

    @staticmethod
    def req_ls_articles_dispo(kwargs):
        query = '''
SELECT 
	T_ARTICLES.CODE_ARTICLE AS CODE_ARTICLE,	
	T_ARTICLES.DISPO AS DISPO
FROM 
	T_ARTICLES
WHERE 
	T_ARTICLES.DISPO = 0
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_ls_articles_export(kwargs):
        query = '''
SELECT 
	T_ARTICLES.CODE_ARTICLE AS CODE_ARTICLE,	
	T_ARTICLES.LIBELLE AS LIBELLE,	
	T_ARTICLES.GP_ARTICLE AS GP_ARTICLE,	
	T_ARTICLES.CODE_PRODUIT AS CODE_PRODUIT,	
	T_ARTICLES.CODE_AROME AS CODE_AROME,	
	T_ARTICLES.TYPE_CAISSE AS TYPE_CAISSE,	
	T_ARTICLES.TYPE_PALETTE AS TYPE_PALETTE,	
	T_ARTICLES.QTE_PACK AS QTE_PACK,	
	T_ARTICLES.QTE_PALETTE AS QTE_PALETTE,	
	T_ARTICLES.CONDITIONNEMENT AS CONDITIONNEMENT,	
	T_ARTICLES.ACTIF AS ACTIF,	
	T_ARTICLES.RANG AS RANG,	
	T_PRIX.PRIX AS PRIX_VENTE,	
	T_PRIX.CODE_AGCE AS CODE_AGCE,	
	T_ARTICLES.AFF_REPARTITION AS AFF_REPARTITION,	
	T_ARTICLES.AFF_COMMANDE AS AFF_COMMANDE,	
	T_ARTICLES.LIBELLE_COURT AS LIBELLE_COURT,	
	T_ARTICLES.ABREVIATION AS ABREVIATION,	
	T_FAMILLE.CODE_FAMILLE AS CODE_FAMILLE,	
	T_FAMILLE.CODE_GAMME AS CODE_GAMME,	
	T_PRODUITS.NOM_PRODUIT AS NOM_PRODUIT,	
	T_GAMME.CODE_GAMME AS CODE_GAMME_T_
FROM 
	T_GAMME,	
	T_FAMILLE,	
	T_PRODUITS,	
	T_ARTICLES,	
	T_PRIX
WHERE 
	T_ARTICLES.CODE_ARTICLE = T_PRIX.CODE_ARTICLE
	AND		T_PRODUITS.CODE_PRODUIT = T_ARTICLES.CODE_PRODUIT
	AND		T_FAMILLE.CODE_FAMILLE = T_PRODUITS.CODE_FAMILLE
	AND		T_GAMME.CODE_GAMME = T_FAMILLE.CODE_GAMME
	AND
	(
		T_PRIX.Date_Debut <= {param_dt}
		AND	T_PRIX.Date_Fin >= {param_dt}
		AND	T_ARTICLES.ACTIF = 1
		AND	T_PRIX.CODE_AGCE = {Param_code_agce}
		AND	T_ARTICLES.AFF_COMMANDE = {Param_aff_commande}
	)
ORDER BY 
	RANG ASC
        '''
        return query.format(**kwargs)

    @staticmethod
    def req_ls_articles_livrees_newrest(kwargs):
        query = '''
SELECT DISTINCT 
	T_PRODUITS_LIVREES.CODE_ARTICLE AS CODE_ARTICLE,	
	T_LIVRAISON.DATE_LIVRAISON AS DATE_LIVRAISON,	
	T_CLIENTS.GROUP_CLIENT AS GROUP_CLIENT
FROM 
	T_CLIENTS,	
	T_LIVRAISON,	
	T_PRODUITS_LIVREES
WHERE 
	T_CLIENTS.CODE_CLIENT = T_LIVRAISON.CODE_CLIENT
	AND		T_LIVRAISON.NUM_LIVRAISON = T_PRODUITS_LIVREES.NUM_LIVRAISON
	AND
	(
		T_CLIENTS.GROUP_CLIENT = {Param_gp_client}
		AND	T_LIVRAISON.DATE_LIVRAISON = {Param_date_livraison}
	)
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_ls_articles_stat(kwargs):
        query = '''
SELECT 
	T_ARTICLES.CODE_ARTICLE AS CODE_ARTICLE,	
	T_ARTICLES.LIBELLE AS LIBELLE,	
	T_ARTICLES.GP_ARTICLE AS GP_ARTICLE,	
	T_ARTICLES.CODE_PRODUIT AS CODE_PRODUIT,	
	T_ARTICLES.CODE_AROME AS CODE_AROME,	
	T_ARTICLES.TYPE_CAISSE AS TYPE_CAISSE,	
	T_ARTICLES.TYPE_PALETTE AS TYPE_PALETTE,	
	T_ARTICLES.QTE_PACK AS QTE_PACK,	
	T_ARTICLES.QTE_PALETTE AS QTE_PALETTE,	
	T_ARTICLES.CONDITIONNEMENT AS CONDITIONNEMENT,	
	T_ARTICLES.ACTIF AS ACTIF,	
	T_ARTICLES.RANG AS RANG,	
	T_ARTICLES.AFF_REPARTITION AS AFF_REPARTITION,	
	T_ARTICLES.AFF_COMMANDE AS AFF_COMMANDE,	
	T_ARTICLES.LIBELLE_COURT AS LIBELLE_COURT,	
	T_ARTICLES.ABREVIATION AS ABREVIATION,	
	T_FAMILLE.CODE_FAMILLE AS CODE_FAMILLE,	
	T_FAMILLE.CODE_GAMME AS CODE_GAMME,	
	T_PRODUITS.NOM_PRODUIT AS NOM_PRODUIT,	
	T_PRODUITS.RANG AS RANG_PRODUIT,	
	T_PRIX.PRIX AS PRIX_VENTE,	
	T_ARTICLES.CONDITIONNEMENT2 AS CONDITIONNEMENT2,	
	T_ARTICLES.QTE_PALETTE2 AS QTE_PALETTE2,	
	T_ARTICLES.CODE_BARRE AS CODE_BARRE,	
	T_ARTICLES.TX_COUVERTURE AS TX_COUVERTURE
FROM 
	T_ARTICLES,	
	T_PRIX,	
	T_PRODUITS,	
	T_FAMILLE
WHERE 
	T_FAMILLE.CODE_FAMILLE = T_PRODUITS.CODE_FAMILLE
	AND		T_PRODUITS.CODE_PRODUIT = T_ARTICLES.CODE_PRODUIT
	AND		T_ARTICLES.CODE_ARTICLE = T_PRIX.CODE_ARTICLE
	AND
	(
		T_ARTICLES.ACTIF_GLOBALE = 1
		AND	T_PRIX.Date_Debut <= {Param_dt}
		AND	T_PRIX.Date_Fin >= {Param_dt}
	)
ORDER BY 
	RANG ASC
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_ls_articles_stock(kwargs):
        query = '''
SELECT 
	T_ARTICLES.CODE_ARTICLE AS CODE_ARTICLE,	
	T_ARTICLES.LIBELLE AS LIBELLE,	
	T_ARTICLES.RANG AS RANG,	
	T_ARTICLES.ACTIF AS ACTIF,	
	T_ARTICLES_MAGASINS.CATEGORIE AS CATEGORIE,	
	SUM(T_ARTICLES_MAGASINS.QTE_STOCK) AS la_somme_QTE_STOCK
FROM 
	T_ARTICLES_MAGASINS,	
	T_ARTICLES
WHERE 
	T_ARTICLES.CODE_ARTICLE = T_ARTICLES_MAGASINS.CODE_ARTICLE
	AND
	(
		T_ARTICLES.ACTIF = 1
		AND	T_ARTICLES_MAGASINS.CATEGORIE = 'PRODUIT'
	)
GROUP BY 
	T_ARTICLES.CODE_ARTICLE,	
	T_ARTICLES.LIBELLE,	
	T_ARTICLES.ACTIF,	
	T_ARTICLES_MAGASINS.CATEGORIE,	
	T_ARTICLES.RANG
ORDER BY 
	RANG ASC
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_ls_articles_tout(kwargs):
        query = '''
SELECT 
	T_ARTICLES.CODE_ARTICLE AS CODE_ARTICLE,	
	T_ARTICLES.LIBELLE AS LIBELLE,	
	T_ARTICLES.GP_ARTICLE AS GP_ARTICLE,	
	T_ARTICLES.CODE_PRODUIT AS CODE_PRODUIT,	
	T_ARTICLES.CODE_AROME AS CODE_AROME,	
	T_ARTICLES.TYPE_CAISSE AS TYPE_CAISSE,	
	T_ARTICLES.TYPE_PALETTE AS TYPE_PALETTE,	
	T_ARTICLES.QTE_PACK AS QTE_PACK,	
	T_ARTICLES.QTE_PALETTE AS QTE_PALETTE,	
	T_ARTICLES.CONDITIONNEMENT AS CONDITIONNEMENT,	
	T_ARTICLES.ACTIF AS ACTIF,	
	T_ARTICLES.RANG AS RANG,	
	T_PRIX.PRIX AS PRIX_VENTE,	
	T_ARTICLES.AFF_REPARTITION AS AFF_REPARTITION,	
	T_ARTICLES.AFF_COMMANDE AS AFF_COMMANDE,	
	T_ARTICLES.LIBELLE_COURT AS LIBELLE_COURT,	
	T_ARTICLES.ABREVIATION AS ABREVIATION,	
	T_FAMILLE.CODE_FAMILLE AS CODE_FAMILLE,	
	T_FAMILLE.CODE_GAMME AS CODE_GAMME,	
	T_PRODUITS.NOM_PRODUIT AS NOM_PRODUIT,	
	T_ARTICLES.ACTIF_GLOBALE AS ACTIF_GLOBALE,	
	T_PRIX.Date_Debut AS Date_Debut,	
	T_PRIX.Date_Fin AS Date_Fin
FROM 
	T_ARTICLES,	
	T_PRIX,	
	T_PRODUITS,	
	T_FAMILLE
WHERE 
	T_ARTICLES.CODE_ARTICLE = T_PRIX.CODE_ARTICLE
	AND		T_PRODUITS.CODE_PRODUIT = T_ARTICLES.CODE_PRODUIT
	AND		T_FAMILLE.CODE_FAMILLE = T_PRODUITS.CODE_FAMILLE
	AND
	(
		T_PRIX.CODE_AGCE = {Param_code_agce}
		AND	T_ARTICLES.ACTIF_GLOBALE = 1
		AND	T_ARTICLES.AFF_COMMANDE = {Param_cat}
		AND	T_PRIX.Date_Fin >= {Param_dt}
		AND	T_PRIX.Date_Debut <= {Param_dt}
	)
ORDER BY 
	RANG ASC
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_ls_autorisation_caisserie(kwargs):
        query = '''
SELECT 
	T_AUTORISATION_SOLDE_CAISSERIE.ID_JUSTIFICATION AS ID_JUSTIFICATION,	
	T_AUTORISATION_SOLDE_CAISSERIE.CODE_OPERATEUR AS CODE_OPERATEUR,	
	T_AUTORISATION_SOLDE_CAISSERIE.DATE_HEURE AS DATE_HEURE,	
	T_AUTORISATION_SOLDE_CAISSERIE.DATE_ECHU AS DATE_ECHU,	
	T_AUTORISATION_SOLDE_CAISSERIE.PAR_ORDRE AS PAR_ORDRE,	
	T_AUTORISATION_SOLDE_CAISSERIE.CS_STD AS CS_STD,	
	T_AUTORISATION_SOLDE_CAISSERIE.CS_PR AS CS_PR,	
	T_AUTORISATION_SOLDE_CAISSERIE.CS_AG AS CS_AG,	
	T_AUTORISATION_SOLDE_CAISSERIE.CS_BLC AS CS_BLC,	
	T_AUTORISATION_SOLDE_CAISSERIE.PAL_AG AS PAL_AG,	
	T_AUTORISATION_SOLDE_CAISSERIE.PAL_UHT AS PAL_UHT,	
	T_AUTORISATION_SOLDE_CAISSERIE.PAL_EURO AS PAL_EURO,	
	T_OPERATEUR.NOM_OPERATEUR AS NOM_OPERATEUR,	
	T_OPERATEUR.Matricule AS Matricule,	
	SAISIE_PAR.NOM_OPERATEUR AS NOM_OPERATEUR_SA,	
	ORDRE.NOM_OPERATEUR AS NOM_OPERATEUR_OR
FROM 
	T_AUTORISATION_SOLDE_CAISSERIE,	
	T_OPERATEUR SAISIE_PAR,	
	T_OPERATEUR,	
	T_OPERATEUR ORDRE
WHERE 
	T_OPERATEUR.CODE_OPERATEUR = T_AUTORISATION_SOLDE_CAISSERIE.CODE_OPERATEUR
	AND		SAISIE_PAR.CODE_OPERATEUR = T_AUTORISATION_SOLDE_CAISSERIE.SAISIE_PAR
	AND		ORDRE.CODE_OPERATEUR = T_AUTORISATION_SOLDE_CAISSERIE.PAR_ORDRE
	AND
	(
		T_AUTORISATION_SOLDE_CAISSERIE.CODE_OPERATEUR = {Param_code_operateur}
		AND	T_AUTORISATION_SOLDE_CAISSERIE.DATE_HEURE BETWEEN {Param_dt1} AND {Param_dt2}
	)
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_ls_autorisation_journee(kwargs):
        query = '''
SELECT 
	T_AUTORISATIONS_SOLDE.ID_JUSTIFICATION AS ID_JUSTIFICATION,	
	T_AUTORISATIONS_SOLDE.DATE_OPERATION AS DATE_OPERATION
FROM 
	T_AUTORISATIONS_SOLDE
WHERE 
	T_AUTORISATIONS_SOLDE.DATE_OPERATION = {Param_date_operation}
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_ls_autorisations(kwargs):
        query = '''
SELECT 
	T_AUTORISATIONS_SOLDE.ID_JUSTIFICATION AS ID_JUSTIFICATION,	
	T_AUTORISATIONS_SOLDE.CODE_OPERATEUR AS CODE_OPERATEUR,	
	T_AUTORISATIONS_SOLDE.DATE_OPERATION AS DATE_OPERATION,	
	T_AUTORISATIONS_SOLDE.CREER_PAR AS CREER_PAR,	
	T_AUTORISATIONS_SOLDE.ORDRE_PAR AS ORDRE_PAR,	
	T_AUTORISATIONS_SOLDE.MONTANT AS MONTANT,	
	T_AUTORISATIONS_SOLDE.DATE_ECHU AS DATE_ECHU,	
	T_OPERATEUR.NOM_OPERATEUR AS NOM_OPERATEUR,	
	T_OPERATEUR.Matricule AS Matricule,	
	ORDRE.NOM_OPERATEUR AS NOM_OPERATEUR_OR,	
	OP_SAISIE.NOM_OPERATEUR AS NOM_OPERATEUR_OP
FROM 
	T_OPERATEUR,	
	T_AUTORISATIONS_SOLDE,	
	T_OPERATEUR ORDRE,	
	T_OPERATEUR OP_SAISIE
WHERE 
	OP_SAISIE.CODE_OPERATEUR = T_AUTORISATIONS_SOLDE.CREER_PAR
	AND		ORDRE.CODE_OPERATEUR = T_AUTORISATIONS_SOLDE.ORDRE_PAR
	AND		T_OPERATEUR.CODE_OPERATEUR = T_AUTORISATIONS_SOLDE.CODE_OPERATEUR
	AND
	(
		T_AUTORISATIONS_SOLDE.CODE_OPERATEUR = {Param_code_operateur}
		AND	T_AUTORISATIONS_SOLDE.DATE_OPERATION BETWEEN {Param_dt1} AND {Param_dt2}
	)
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_ls_avoirs_secteurs(kwargs):
        query = '''
SELECT 
	T_PRODUITS_CHARGEE.DATE_CHARGEMENT AS DATE_CHARGEMENT,	
	T_PRODUITS_CHARGEE.COMPTE_ECART AS COMPTE_ECART,	
	T_SECTEUR.NOM_SECTEUR AS NOM_SECTEUR,	
	SUM(T_PRODUITS_CHARGEE.QTE_ECART) AS la_somme_QTE_ECART,	
	SUM(T_PRODUITS_CHARGEE.MONTANT_ECART) AS la_somme_MONTANT_ECART,	
	T_PRODUITS.NOM_PRODUIT AS NOM_PRODUIT
FROM 
	T_PRODUITS,	
	T_ARTICLES,	
	T_PRODUITS_CHARGEE,	
	T_SECTEUR
WHERE 
	T_SECTEUR.code_secteur = T_PRODUITS_CHARGEE.code_secteur
	AND		T_ARTICLES.CODE_ARTICLE = T_PRODUITS_CHARGEE.CODE_ARTICLE
	AND		T_PRODUITS.CODE_PRODUIT = T_ARTICLES.CODE_PRODUIT
	AND
	(
		T_PRODUITS_CHARGEE.DATE_CHARGEMENT BETWEEN {Param_dt1} AND {Param_dt2}
		AND	T_PRODUITS_CHARGEE.COMPTE_ECART = {Param_combo_controleur}
	)
GROUP BY 
	T_PRODUITS_CHARGEE.DATE_CHARGEMENT,	
	T_PRODUITS_CHARGEE.COMPTE_ECART,	
	T_SECTEUR.NOM_SECTEUR,	
	T_PRODUITS.NOM_PRODUIT
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_ls_avoirs_secteurs_caisserie(kwargs):
        query = '''
SELECT 
	T_COND_CHARGEE.DATE_CHARGEMENT AS DATE_CHARGEMENT,	
	T_COND_CHARGEE.COMPTE_ECART AS COMPTE_ECART,	
	T_SECTEUR.NOM_SECTEUR AS NOM_SECTEUR,	
	T_COND_CHARGEE.CODE_COND AS CODE_COND,	
	SUM(T_COND_CHARGEE.ECART) AS la_somme_ECART
FROM 
	T_CHARGEMENT,	
	T_COND_CHARGEE,	
	T_SECTEUR
WHERE 
	T_SECTEUR.code_secteur = T_CHARGEMENT.code_secteur
	AND		T_CHARGEMENT.CODE_CHARGEMENT = T_COND_CHARGEE.CODE_CHARGEMENT
	AND
	(
		T_COND_CHARGEE.COMPTE_ECART = {Param_compte_ecart}
		AND	T_COND_CHARGEE.DATE_CHARGEMENT BETWEEN {Param_dt1} AND {Param_dt2}
	)
GROUP BY 
	T_SECTEUR.NOM_SECTEUR,	
	T_COND_CHARGEE.CODE_COND,	
	T_COND_CHARGEE.COMPTE_ECART,	
	T_COND_CHARGEE.DATE_CHARGEMENT
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_ls_bl_client(kwargs):
        query = '''
SELECT 
	T_LIVRAISON.NUM_LIVRAISON AS NUM_LIVRAISON,	
	T_LIVRAISON.DATE_LIVRAISON AS DATE_LIVRAISON,	
	T_LIVRAISON.CODE_CLIENT AS CODE_CLIENT,	
	T_LIVRAISON.STATUT AS STATUT,	
	T_LIVRAISON.NUM_COMMANDE AS NUM_COMMANDE,	
	T_LIVRAISON.SUR_COMMANDE AS SUR_COMMANDE,	
	T_CLIENTS.CAT_CLIENT AS CAT_CLIENT
FROM 
	T_CLIENTS,	
	T_LIVRAISON
WHERE 
	T_CLIENTS.CODE_CLIENT = T_LIVRAISON.CODE_CLIENT
	AND
	(
		T_LIVRAISON.DATE_LIVRAISON = {Param_date_livraison}
		AND	T_LIVRAISON.CODE_CLIENT = {Param_code_client}
		AND	T_LIVRAISON.STATUT <> 'A'
	)
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_ls_borderau_valeurs(kwargs):
        query = '''
SELECT 
	T_BORDEREAU_VALEURS.ID_BORDEREAU AS ID_BORDEREAU,	
	T_BORDEREAU_VALEURS.VALID AS VALID,	
	T_BORDEREAU_VALEURS.DATE_HEURE_SAISIE AS DATE_HEURE_SAISIE,	
	T_BORDEREAU_VALEURS.ACTIF AS ACTIF,	
	T_BORDEREAU_VALEURS.NUM_BORDEAU_BANQUE AS NUM_BORDEAU_BANQUE,	
	T_BORDEREAU_VALEURS.DATE_SITUATION AS DATE_SITUATION,	
	T_BANQUES.LIBELLE AS LIBELLE
FROM 
	T_BANQUES,	
	T_BORDEREAU_VALEURS
WHERE 
	T_BANQUES.NUM_BANQUE = T_BORDEREAU_VALEURS.CODE_BANQUE
	AND
	(
		T_BORDEREAU_VALEURS.ACTIF = 1
	)
ORDER BY 
	ID_BORDEREAU DESC
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_ls_chargement_cac(kwargs):
        query = '''
SELECT 
	T_CHARGEMENT.DATE_CHARGEMENT AS DATE_CHARGEMENT,	
	T_CHARGEMENT.code_secteur AS code_secteur,	
	T_CHARGEMENT.CODE_CHARGEMENT AS CODE_CHARGEMENT
FROM 
	T_CHARGEMENT
WHERE 
	T_CHARGEMENT.DATE_CHARGEMENT = {Param_date_chargement}
	AND	T_CHARGEMENT.code_secteur = {Param_code_secteur}
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_ls_chargements_journee(kwargs):
        query = '''
SELECT DISTINCT 
	T_CHARGEMENT.CODE_CHARGEMENT AS CODE_CHARGEMENT,	
	T_CHARGEMENT.DATE_CHARGEMENT AS DATE_CHARGEMENT,	
	T_CHARGEMENT.code_secteur AS code_secteur,	
	T_CHARGEMENT.CODE_TOURNEE AS CODE_TOURNEE,	
	T_CHARGEMENT.vehicule AS vehicule,	
	T_CHARGEMENT.code_vendeur AS code_vendeur,	
	T_CHARGEMENT.code_chauffeur AS code_chauffeur,	
	T_CHARGEMENT.AIDE_VENDEUR1 AS AIDE_VENDEUR1,	
	T_CHARGEMENT.AIDE_VENDEUR2 AS AIDE_VENDEUR2,	
	T_OPERATEUR.NOM_OPERATEUR AS NOM_VENDEUR,	
	T_TOURNEES.NOM_TOURNEE AS NOM_TOURNEE,	
	T_SECTEUR.NOM_SECTEUR AS NOM_SECTEUR,	
	T_CHARGEMENT.VALID AS VALID,	
	T_CHARGEMENT.MONTANT_A_VERSER AS MONTANT_A_VERSER,	
	T_SECTEUR.CAT_SECTEUR AS CAT_SECTEUR,	
	T_SECTEUR.RANG AS RANG,	
	T_SECTEUR.PREVENTE AS PREVENTE
FROM 
	T_SECTEUR,	
	T_TOURNEES,	
	T_CHARGEMENT,	
	T_OPERATEUR
WHERE 
	T_CHARGEMENT.CODE_TOURNEE = T_TOURNEES.CODE_TOURNEE
	AND		T_SECTEUR.code_secteur = T_CHARGEMENT.code_secteur
	AND		T_CHARGEMENT.code_vendeur = T_OPERATEUR.CODE_OPERATEUR
	AND
	(
		T_CHARGEMENT.DATE_CHARGEMENT = {Param_date_chargement}
	)
ORDER BY 
	RANG ASC
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_ls_chauffeurs(kwargs):
        query = '''
SELECT 
	T_OPERATEUR.CODE_OPERATEUR AS CODE_OPERATEUR,	
	T_OPERATEUR.NOM_OPERATEUR AS NOM_OPERATEUR,	
	T_OPERATEUR.FONCTION AS FONCTION,	
	T_OPERATEUR.ACTIF AS ACTIF
FROM 
	T_OPERATEUR
WHERE 
	T_OPERATEUR.ACTIF = 1
	AND	T_OPERATEUR.FONCTION IN (2, 5, 6) 
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_ls_cheques(kwargs):
        query = '''
SELECT 
	T_OPERATIONS_CAISSE.DATE_OPERATION AS DATE_OPERATION,	
	T_OPERATIONS_CAISSE.DATE_VALIDATION AS DATE_VALIDATION,	
	T_OPERATIONS_CAISSE.MONTANT AS MONTANT,	
	T_OPERATIONS_CAISSE.NUM_PIECE AS NUM_PIECE,	
	T_OPERATIONS_CAISSE.TYPE_OPERATION AS TYPE_OPERATION
FROM 
	T_OPERATIONS_CAISSE
WHERE 
	T_OPERATIONS_CAISSE.DATE_OPERATION = {Param_date_operation}
	AND	T_OPERATIONS_CAISSE.TYPE_OPERATION = 'T'
	AND	T_OPERATIONS_CAISSE.DATE_VALIDATION = {Param_date_validation}
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_ls_cheques_cac(kwargs):
        query = '''
SELECT 
	T_DECOMPTE.NUM_DECOMPTE AS NUM_DECOMPTE,	
	T_DECOMPTE.CODE_OPERATEUR AS CODE_OPERATEUR,	
	T_DECOMPTE.DATE_DECOMPTE AS DATE_DECOMPTE,	
	T_DECOMPTE.MODE_PAIEMENT AS MODE_PAIEMENT,	
	T_DECOMPTE.CODE_CAISSE AS CODE_CAISSE,	
	T_DECOMPTE.MONTANT AS MONTANT,	
	T_DECOMPTE.DATE_HEURE_VERS AS DATE_HEURE_VERS,	
	T_DECOMPTE.CODE_CLIENT AS CODE_CLIENT,	
	T_DECOMPTE.CODE_BANQUE AS CODE_BANQUE,	
	T_DECOMPTE.REFERENCE AS REFERENCE,	
	T_DECOMPTE.REGLEMENT AS REGLEMENT,	
	T_DT_DECOMPTE.GP_CLIENT AS GP_CLIENT,	
	T_GROUP_CLIENTS.NOM_GROUP AS NOM_GROUP,	
	T_DT_DECOMPTE.RIB AS RIB
FROM 
	T_DT_DECOMPTE,	
	T_GROUP_CLIENTS,	
	T_DECOMPTE
WHERE 
	T_DT_DECOMPTE.GP_CLIENT = T_GROUP_CLIENTS.ID_GP_CLIENT
	AND		T_DECOMPTE.NUM_DECOMPTE = T_DT_DECOMPTE.NUM_DECOMPTE
	AND
	(
		T_DECOMPTE.MODE_PAIEMENT = 'R'
		AND	T_DECOMPTE.DATE_HEURE_VERS BETWEEN {Param1} AND {Param2}
		AND	T_DT_DECOMPTE.GP_CLIENT = {Param_gp_client}
	)
ORDER BY 
	NUM_DECOMPTE DESC
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_ls_cheques_non_remis(kwargs):
        query = '''
SELECT 
T_DECOMPTE.NUM_DECOMPTE AS NUM_DECOMPTE,	
T_DECOMPTE.MODE_PAIEMENT AS MODE_PAIEMENT,	
T_DECOMPTE.MONTANT AS MONTANT,	
T_BANQUES.LIBELLE AS LIBELLE,	
T_DT_DECOMPTE.LE_TIRE AS LE_TIRE,	
T_DT_DECOMPTE.DATE_CHEQUE AS DATE_CHEQUE,	
T_DT_DECOMPTE.DATE_ECHEANCE AS DATE_ECHEANCE,	
T_DECOMPTE.REFERENCE AS REFERENCE
FROM 
T_DT_DECOMPTE,	
T_BANQUES,	
T_DECOMPTE
WHERE 
T_DECOMPTE.NUM_DECOMPTE = T_DT_DECOMPTE.NUM_DECOMPTE
AND		T_BANQUES.NUM_BANQUE = T_DECOMPTE.CODE_BANQUE
AND
(
T_DECOMPTE.NUM_DECOMPTE NOT IN 
(
SELECT 
T_DT_BORDEREAU.NUM_DECOMPTE AS NUM_DECOMPTE
FROM 
T_BORDEREAU_VALEURS,	
T_DT_BORDEREAU
WHERE 
T_BORDEREAU_VALEURS.ID_BORDEREAU = T_DT_BORDEREAU.ID_BORDEREAU
AND
(
T_BORDEREAU_VALEURS.ACTIF = 1
)
) 
)

        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_ls_client_servi_date(kwargs):
        query = '''
SELECT DISTINCT 
	T_SOUS_SECTEUR.code_secteur AS code_secteur,	
	T_FACTURE.CODE_CLIENT AS CODE_CLIENT,	
	T_FACTURE.VALID AS VALID
FROM 
	T_FACTURE,	
	T_CLIENTS,	
	T_SOUS_SECTEUR
WHERE 
	T_FACTURE.CODE_CLIENT = T_CLIENTS.CODE_CLIENT
	AND		T_SOUS_SECTEUR.CODE_SOUS_SECTEUR = T_CLIENTS.SOUS_SECTEUR
	AND
	(
		T_FACTURE.VALID = 1
		AND	T_FACTURE.DATE_HEURE BETWEEN {Param_DATE_HEURE1} AND {Param_DATE_HEURE2}
		AND	T_SOUS_SECTEUR.code_secteur = {Param_CODE_SECTEUR}
	)
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_ls_clients(kwargs):
        query = '''
SELECT 
	T_CLIENTS.CODE_CLIENT AS CODE_CLIENT,	
	T_CLIENTS.RANG AS RANG,	
	T_CLIENTS.NOM_CLIENT AS NOM_CLIENT,	
	T_CLIENTS.CLIENT_EN_COMPTE AS CLIENT_EN_COMPTE,	
	T_CLIENTS.ACTIF AS ACTIF,	
	T_CAT_CLIENTS.NOM_CATEGORIE AS NOM_CATEGORIE,	
	T_CLIENTS.CLASSE AS CLASSE,	
	T_CLASSE_CLIENTS.NOM_CLASSE AS NOM_CLASSE,	
	T_CLIENTS.CAT_CLIENT AS CAT_CLIENT,	
	T_CLIENTS.DES_CLIENT AS DES_CLIENT,	
	T_CLIENTS.ADRESSE AS ADRESSE,	
	T_CLIENTS.TELEPHONE AS TELEPHONE,	
	T_CLIENTS.SOUS_SECTEUR AS SOUS_SECTEUR,	
	T_CLIENTS.TOURNEE AS TOURNEE,	
	T_CLIENTS.SOLDE_PRODUITS AS SOLDE_PRODUITS,	
	T_CLIENTS.SOLDE_CONDITIONNEMENT AS SOLDE_CONDITIONNEMENT,	
	T_SOUS_SECTEUR.code_secteur AS code_secteur,	
	T_CLIENTS.SOLDE_C_STD AS SOLDE_C_STD,	
	T_CLIENTS.SOLDE_P_AG AS SOLDE_P_AG,	
	T_CLIENTS.SOLDE_P_UHT AS SOLDE_P_UHT,	
	T_CLIENTS.SOLDE_C_AG AS SOLDE_C_AG,	
	T_CLIENTS.SOLDE_C_PR AS SOLDE_C_PR,	
	T_CLIENTS.TYPE_BL AS TYPE_BL,	
	T_CLIENTS.GROUP_CLIENT AS GROUP_CLIENT,	
	T_CLIENTS.AUT_CHEQUE AS AUT_CHEQUE,	
	T_CLIENTS.TYPE_PRESENTOIRE AS TYPE_PRESENTOIRE,	
	T_SECTEUR.NOM_SECTEUR AS NOM_SECTEUR,	
	T_CLIENTS.REMISE_LAIT AS REMISE_LAIT
FROM 
	T_CAT_CLIENTS,	
	T_CLIENTS,	
	T_CLASSE_CLIENTS,	
	T_SOUS_SECTEUR,	
	T_SECTEUR
WHERE 
	T_SECTEUR.code_secteur = T_SOUS_SECTEUR.code_secteur
	AND		T_SOUS_SECTEUR.CODE_SOUS_SECTEUR = T_CLIENTS.SOUS_SECTEUR
	AND		T_CLASSE_CLIENTS.CODE_CLASSE = T_CLIENTS.CLASSE
	AND		T_CAT_CLIENTS.CODE_CAT_CLIENT = T_CLIENTS.CAT_CLIENT
	AND
	(
		T_CLIENTS.CODE_CLIENT <> 0
		AND	T_SOUS_SECTEUR.code_secteur = {Param_param_code_secteur}
		AND	T_CLIENTS.CLIENT_EN_COMPTE = {Param_cac}
		AND	T_CLIENTS.CLASSE NOT IN ({param_not_classe}) 
		AND	T_CLIENTS.AUT_CHEQUE = {Param_auth_cheque}
		AND	T_CLIENTS.TYPE_PRESENTOIRE = {Param_type_pres}
		AND	T_CLIENTS.ACTIF = {Param_actif}
	)
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_ls_clients_cac(kwargs):
        query = '''
SELECT 
	T_CLIENTS.CODE_CLIENT AS CODE_CLIENT,	
	T_CLIENTS.NOM_CLIENT AS NOM_CLIENT,	
	T_CLIENTS.ACTIF AS ACTIF,	
	T_CLIENTS.CLIENT_EN_COMPTE AS CLIENT_EN_COMPTE
FROM 
	T_CLIENTS
WHERE 
	T_CLIENTS.CLIENT_EN_COMPTE = 1
	AND	T_CLIENTS.ACTIF = 1
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_ls_clients_cac_dep(kwargs):
        query = '''
SELECT 
	T_CLIENTS.CODE_CLIENT AS CODE_CLIENT,	
	T_CLIENTS.RANG AS RANG,	
	T_CLIENTS.NOM_CLIENT AS NOM_CLIENT,	
	T_CLIENTS.CLIENT_EN_COMPTE AS CLIENT_EN_COMPTE,	
	T_CLIENTS.ACTIF AS ACTIF,	
	T_SECTEUR.code_secteur AS code_secteur,	
	T_SECTEUR.NOM_SECTEUR AS NOM_SECTEUR,	
	T_CLIENTS.CAT_CLIENT AS CAT_CLIENT,	
	T_CLIENTS.GROUP_CLIENT AS GROUP_CLIENT
FROM 
	T_SECTEUR,	
	T_SOUS_SECTEUR,	
	T_CLIENTS
WHERE 
	T_SECTEUR.code_secteur = T_SOUS_SECTEUR.code_secteur
	AND		T_SOUS_SECTEUR.CODE_SOUS_SECTEUR = T_CLIENTS.SOUS_SECTEUR
	AND
	(
		T_CLIENTS.ACTIF = 1
		AND	
		(
			T_CLIENTS.CLIENT_EN_COMPTE = 1
			OR	T_CLIENTS.CAT_CLIENT IN (1, 2, 15) 
		)
		AND	T_SECTEUR.code_secteur = {Param_code_secteur}
		AND	T_CLIENTS.GROUP_CLIENT = {Param_GP_CLIENT}
	)
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_ls_clients_cac_remise(kwargs):
        query = '''
SELECT DISTINCT 
	T_LIVRAISON.CODE_CLIENT AS CODE_CLIENT,	
	T_CLIENTS.NOM_CLIENT AS NOM_CLIENT,	
	T_SECTEUR.NOM_SECTEUR AS NOM_SECTEUR,	
	T_CLIENTS.CLASSE AS CLASSE,	
	T_CLIENTS.CLIENT_EN_COMPTE AS CLIENT_EN_COMPTE
FROM 
	T_CLIENTS,	
	T_LIVRAISON,	
	T_SOUS_SECTEUR,	
	T_SECTEUR
WHERE 
	T_SECTEUR.code_secteur = T_SOUS_SECTEUR.code_secteur
	AND		T_SOUS_SECTEUR.CODE_SOUS_SECTEUR = T_CLIENTS.SOUS_SECTEUR
	AND		T_CLIENTS.CODE_CLIENT = T_LIVRAISON.CODE_CLIENT
	AND
	(
		T_LIVRAISON.STATUT <> 'A'
		AND	T_LIVRAISON.DATE_LIVRAISON BETWEEN {Param_dt1} AND {Param_dt2}
		AND	T_CLIENTS.CLIENT_EN_COMPTE = 1
		AND	T_CLIENTS.CLASSE IN (2, 6, 7, 8, 9, 10) 
	)
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_ls_clients_classe_secteur(kwargs):
        query = '''
SELECT 
	T_CLIENTS.CODE_CLIENT AS CODE_CLIENT,	
	T_CLIENTS.NOM_CLIENT AS NOM_CLIENT,	
	T_CLIENTS.CLASSE AS CLASSE,	
	T_CLIENTS.ACTIF AS ACTIF,	
	T_SOUS_SECTEUR.code_secteur AS code_secteur
FROM 
	T_SOUS_SECTEUR,	
	T_CLIENTS
WHERE 
	T_SOUS_SECTEUR.CODE_SOUS_SECTEUR = T_CLIENTS.SOUS_SECTEUR
	AND
	(
		T_SOUS_SECTEUR.code_secteur = {Param_code_secteur}
		AND	T_CLIENTS.CLASSE NOT IN (1, 3) 
	)
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_ls_clients_con_dec(kwargs):
        query = '''
SELECT 
	T_CLIENTS.CODE_CLIENT AS CODE_CLIENT,	
	T_CLIENTS.CAT_CLIENT AS CAT_CLIENT,	
	T_CLIENTS.NOM_CLIENT AS NOM_CLIENT
FROM 
	T_CLIENTS
WHERE 
	T_CLIENTS.CODE_CLIENT <> 0
	AND	T_CLIENTS.SOLDE_C_PR = 1
ORDER BY 
	NOM_CLIENT ASC
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_ls_clients_conseigne(kwargs):
        query = '''
SELECT 
	T_CLIENTS.CODE_CLIENT AS CODE_CLIENT,	
	T_CLIENTS.RANG AS RANG,	
	T_CLIENTS.NOM_CLIENT AS NOM_CLIENT,	
	T_CLIENTS.CLIENT_EN_COMPTE AS CLIENT_EN_COMPTE,	
	T_CLIENTS.ACTIF AS ACTIF,	
	T_CAT_CLIENTS.NOM_CATEGORIE AS NOM_CATEGORIE,	
	T_CLIENTS.CLASSE AS CLASSE,	
	T_CLASSE_CLIENTS.NOM_CLASSE AS NOM_CLASSE,	
	T_CLIENTS.CAT_CLIENT AS CAT_CLIENT,	
	T_CLIENTS.DES_CLIENT AS DES_CLIENT,	
	T_CLIENTS.ADRESSE AS ADRESSE,	
	T_CLIENTS.TELEPHONE AS TELEPHONE,	
	T_CLIENTS.SOUS_SECTEUR AS SOUS_SECTEUR,	
	T_CLIENTS.TOURNEE AS TOURNEE,	
	T_CLIENTS.SOLDE_PRODUITS AS SOLDE_PRODUITS,	
	T_CLIENTS.SOLDE_CONDITIONNEMENT AS SOLDE_CONDITIONNEMENT,	
	T_SOUS_SECTEUR.code_secteur AS code_secteur,	
	T_CLIENTS.SOLDE_C_STD AS SOLDE_C_STD,	
	T_CLIENTS.SOLDE_P_AG AS SOLDE_P_AG,	
	T_CLIENTS.SOLDE_P_UHT AS SOLDE_P_UHT,	
	T_CLIENTS.SOLDE_C_AG AS SOLDE_C_AG,	
	T_CLIENTS.SOLDE_C_PR AS SOLDE_C_PR,	
	T_CLIENTS.TYPE_BL AS TYPE_BL,	
	T_CLIENTS.GROUP_CLIENT AS GROUP_CLIENT,	
	T_CLIENTS.AUT_CHEQUE AS AUT_CHEQUE,	
	T_CLIENTS.TYPE_PRESENTOIRE AS TYPE_PRESENTOIRE,	
	T_SECTEUR.NOM_SECTEUR AS NOM_SECTEUR
FROM 
	T_CAT_CLIENTS,	
	T_CLIENTS,	
	T_CLASSE_CLIENTS,	
	T_SOUS_SECTEUR,	
	T_SECTEUR
WHERE 
	T_SECTEUR.code_secteur = T_SOUS_SECTEUR.code_secteur
	AND		T_SOUS_SECTEUR.CODE_SOUS_SECTEUR = T_CLIENTS.SOUS_SECTEUR
	AND		T_CLASSE_CLIENTS.CODE_CLASSE = T_CLIENTS.CLASSE
	AND		T_CAT_CLIENTS.CODE_CAT_CLIENT = T_CLIENTS.CAT_CLIENT
	AND
	(
		T_CLIENTS.CODE_CLIENT <> 0
		AND	T_SOUS_SECTEUR.code_secteur = {Param_param_code_secteur}
		AND	T_CLIENTS.CLIENT_EN_COMPTE = {Param_cac}
		AND	T_CLIENTS.CLASSE NOT IN ({param_not_classe}) 
		AND	T_CLIENTS.AUT_CHEQUE = {Param_auth_cheque}
		AND	T_CLIENTS.TYPE_PRESENTOIRE = {Param_type_pres}
		AND	T_CLIENTS.ACTIF = {Param_actif}
		AND	T_CLIENTS.SOLDE_C_PR = 1
	)
        '''
        return query.format(**kwargs)

    @staticmethod
    def Req_ls_clients_itinéraire(kwargs):
        query = '''
SELECT 
	T_ITINERAIRES.CODE_TOURNEE AS CODE_TOURNEE,	
	T_ITINERAIRES.CODE_CLIENT AS CODE_CLIENT,	
	T_ITINERAIRES.RANG AS RANG,	
	T_CLIENTS.NOM_CLIENT AS NOM_CLIENT,	
	T_CLIENTS.ADRESSE AS ADRESSE,	
	T_CLIENTS.ACTIF AS ACTIF,	
	T_SOUS_SECTEUR.NOM_SOUS_SECTEUR AS NOM_SOUS_SECTEUR,	
	T_ITINERAIRES.RANG_PREVENTE AS RANG_PREVENTE
FROM 
	T_CLIENTS,	
	T_ITINERAIRES,	
	T_SOUS_SECTEUR
WHERE 
	T_SOUS_SECTEUR.CODE_SOUS_SECTEUR = T_CLIENTS.SOUS_SECTEUR
	AND		T_CLIENTS.CODE_CLIENT = T_ITINERAIRES.CODE_CLIENT
	AND
	(
		T_CLIENTS.ACTIF = 1
		AND	T_ITINERAIRES.CODE_TOURNEE = {Param_code_tournee}
	)
ORDER BY 
	RANG ASC
        '''
        return query.format(**kwargs)

